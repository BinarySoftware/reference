{"name":"Std","documentation":null,"units":[{"name":"Std.Base","documentation":null,"classes":[{"methods":[{"name":"+","documentation":"Integer addition.\n\n> import Std.Base\n>\n> def main:\n>     a = 5\n>     b = 10\n>     sum = a.+ b\n>     None\n\n`that`: Integer to add to `self` value.\n`returns`: Sum of `self` and `that` values."},{"name":"*","documentation":"Integer multiplication.\n\n> import Std.Base\n>\n> def main:\n>     a = 5\n>     b = 10\n>     multiplication = a.* b\n>     None\n\n`that`: Integer to multiply by `self` value.\n`returns`: The product of the `self` and `that` values."},{"name":"-","documentation":"Integer subtraction.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     b = 5\n>     substraction = a.- b\n>     None\n\n`that`: Integer to substract from `self` value.\n`returns`: The result of subtracting the value of `that` from the value of `self`."},{"name":"/","documentation":"Integral division.\n`a./ b` returns the largest integer `c` such that `c * b <= a`.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     b = 3\n>     division = a./ b\n>     None\n\n`that`: Integer value to divide `self` value by it.\n`returns`: The result of dividing the value of `self` by `that`."},{"name":"%","documentation":"Division remainder `a.% b == a - (a / b) * b`\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     b = 3\n>     remainder = a.% b\n>     None\n\n`that`: Integer value to divide `self` value by it.\n`returns`: The value 'left over' after dividing `self` by `that` value."},{"name":">","documentation":"`a.> b` returns True when `a` is greater than `b`.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     b = 3\n>     isGreater = a.> b\n>     None\n\n`that`: Integer value to compare with `self` value.\n`returns`: `True` if `self` value is greater than `that`, `False` otherwise."},{"name":"<","documentation":"`a.< b` returns True when `a` is lesser than `b`.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     b = 3\n>     isLesser = a.< b\n>     None\n\n`that`: Integer value to compare with `self` value.\n`returns`: `True` if `self` value is lower than `that`, `False` otherwise."},{"name":"==","documentation":"Integer equality. `a.== b` returns True when `a` equals `b`.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     b = 3\n>     isEqual = a.== b\n>     None\n\n`that`: Integer value to compare with `self` value.\n`returns`: `True` if `self` value is equal to `that`, `False` otherwise."},{"name":"abs","documentation":"Absolute value.\n\n> import Std.Base\n>\n> def main:\n>     a = - 10\n>     b = a.abs\n>     None\n\n`returns`: The absolute value of `self`."},{"name":"negate","documentation":"Integer negation.\n`a.negate == -1 * a`.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     negation = a.negate\n>     None\n\n`returns`: Negation of `self` value."},{"name":"toInt","documentation":null},{"name":"toReal","documentation":"Promote an integer to a real number.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     b = a.toReal\n>     None\n\n`returns`: `self` as Real value."},{"name":"toText","documentation":"Display an integer as text.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     txt = a.toText\n>     None\n\n`returns`: `self` as a Text value."},{"name":"shortRep","documentation":"Alias for `toText`, for the purpose of pretty printing the number."},{"name":"toJSON","documentation":"JSON representation of an integer."},{"name":"miliseconds","documentation":"Returns a TimeInterval with the length of `self` miliseconds.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     ms = a.miliseconds\n>     None\n\n`returns`: `self` as a TimeInterval value in miliseconds."},{"name":"seconds","documentation":"Returns a TimeInterval with the length of `self` seconds.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     s = a.seconds\n>     None\n\n`returns`: `self` as TimeInterval value in seconds."},{"name":"minutes","documentation":"Returns a TimeInterval with the length of `self` minutes.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     min = a.minutes\n>     None\n\n`returns`: `self` as TimeInterval value in minutes."},{"name":"hours","documentation":"Returns a TimeInterval with the length of `self` hours.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     h = a.hours\n>     None\n\n`returns`: `self` as TimeInterval value in hours."},{"name":"days","documentation":"Returns a TimeInterval with the length of `self` days.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     d = a.days\n>     None\n\n`returns`: `self` as TimeInterval value in days."},{"name":"weeks","documentation":"Returns a TimeInterval with the length of `self` weeks.\n\n> import Std.Base\n>\n> def main:\n>     a = 10\n>     w = a.weeks\n>     None\n\n`returns`: `self` as TimeInterval value in weeks."},{"name":"pred","documentation":"Predecessor.\n\n> import Std.Base\n>\n> def main:\n>     a = 5\n>     b = a.pred\n>     None\n\n`returns`: Predecessor of `self` value: `a.pred == a - 1`."},{"name":"succ","documentation":"Successor.\n\n> import Std.Base\n>\n> def main:\n>     a = 5\n>     b = a.succ\n>     None\n\n`returns`: Successor of `self` value: `a.succ == a + 1`."},{"name":"upto","documentation":"Generates a list representing a range.\n\n> import Std.Base\n>\n> def main:\n>     a = 3\n>     b = 10\n>     list = a.upto b\n>     None\n\n> `i`: Stop value for the sequence of numbers.\n> `returns`: List of values from `self` to `i`.\n>            For example above it will be `[3,4,5,6,7,8,9,10]`."},{"name":"shift","documentation":"`x.shift i` shifts x left by i bits if it is positive, or right by -i otherwise."},{"name":"toLQueryValue","documentation":null}],"name":"Int","documentation":"Class representing integer numbers of arbitrary size."},{"methods":[{"name":"==","documentation":null},{"name":"toInt","documentation":null},{"name":"toReal","documentation":null},{"name":"toText","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"coefficient","documentation":"Field getter"},{"name":"exponent","documentation":"Field getter"},{"name":"coefficient=","documentation":"Field setter"},{"name":"exponent=","documentation":"Field setter"}],"name":"Scientific","documentation":null},{"methods":[{"name":"+","documentation":"Floating point addition.\n\n> import Std.Base\n>\n> def main:\n>     a = 5.0\n>     b = 10.5\n>     sum = a.+ b\n>     None\n\n`that`: Floating point number to add to `self` value.\n`returns`: Sum of the `self` and `that` values."},{"name":"*","documentation":"Floating point multiplication.\n\n> import Std.Base\n>\n> def main:\n>     a = 5.5\n>     b = 10.0\n>     multiplication = a.* b\n>     None\n\n`that`: Floating point number to multiply by `self` value.\n`returns`: The product of the `self` and `that` values."},{"name":"-","documentation":"Floating point subtraction.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.3\n>     b = 5.0\n>     substraction = a.- b\n>     None\n\n`that`: Floating point number to substract from `self` value.\n`returns`: The result of subtracting the value of `that` from the value of `self`."},{"name":"/","documentation":"Floating point division.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.4\n>     b = 2.0\n>     division = a./ b\n>     None\n\n`that`: Floating point number value to divide `self` value by it.\n`returns`: The result of dividing the value of `self` by `that`."},{"name":">","documentation":"Tests whether `self` is greater than the argument.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.4\n>     b = 3.76\n>     isGreater = a.> b\n>     None\n\n`that`: Floating point number value to compare with `self` value.\n`returns`: `True` if `self` value is greater than `that`, `False` otherwise."},{"name":"<","documentation":"Tests whether `self` is lesser than the argument.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.7\n>     b = 3.45\n>     isLesser = a.< b\n>     None\n\n`that`: Floating point number value to compare with `self` value.\n`returns`: `True` if `self` value is smaller than `that`, `False` otherwise."},{"name":"==","documentation":"Tests whether `self` is equal to the argument.\n\n> import Std.Base\n>\n> def main:\n>     a = 3.45\n>     b = 3.45\n>     isEqual = a.== b\n>     None\n\n`that`: Floating point number value to compare with `self` value.\n`returns`: `True` if `self` value is equal to `that`, `False` otherwise."},{"name":"abs","documentation":"Absolute value.\n\n> import Std.Base\n>\n> def main:\n>     a = - 3.45\n>     b = a.abs\n>     None\n\n`returns`: The absolute value of `self`."},{"name":"negate","documentation":"Negation.\n`a.negate == -1.0 * a`\n\n> import Std.Base\n>\n> def main:\n>     a = 10.0\n>     b = a.negate\n>     None\n\n`returns`: Negation of `self` value."},{"name":"toReal","documentation":null},{"name":"toText","documentation":"Display a real number as text.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.0\n>     txt = a.toText\n>     None\n\n`returns`: `self` as a Text value."},{"name":"shortRep","documentation":"Displays a number as text.\n\n> import Std.Base\n>\n> def main:\n>     a = 100.0\n>     txt = a.toText\n>     None\n\n`returns`: `self` as Text value."},{"name":"toJSON","documentation":"Converts a number to `JSON`.\n\n> import Std.Base\n>\n> def main:\n>     a = 100.0\n>     json = a.toJSON\n>     None\n\n`returns`: `self` JSON value."},{"name":"toLQueryValue","documentation":null},{"name":"^","documentation":"Floating point exponentiation.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.4\n>     b = 2.0\n>     exp = a.^ b\n>     None\n\n`that`: Exponent (floating point number).\n`returns`: Floating point number value, which is a result of\nexponentiation of `self` value to `that` power."},{"name":"log","documentation":"Floating point logarithm with given basis.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.4\n>     b = 2.0\n>     logarithm = a.log b\n>     None\n\n`base`: Logarithm base (floating point number).\n`returns`: Floating point number value, result for logarithm\ncalculation of `self` value to `base`."},{"name":"round","documentation":"Round a number to the given precision – the result is a real number\nwith a number of digits after the decimal dot equal to the argument.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     b = a.round 2\n>     None\n\n`prec`: Integer value describing the operation presicion.\n`returns`: Floating point number value which is a `self` value rounded\nwith number of digits after decimal dot equal with `prec` value."},{"name":"floor","documentation":"Round a number down to the closest `Int`\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     b = a.floor\n>     None\n\n`returns`: The largest integer value less than or equal to `self` value."},{"name":"ceiling","documentation":"Round a number up to the closest `Int`\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     b = a.ceiling\n>     None\n\n`returns`: The smallest integer value greater than or equal to `self` value."},{"name":"sin","documentation":"Sine function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     sine = a.sin\n>     None\n\n`returns`: The sine of `self` in radians."},{"name":"cos","documentation":"Cosine function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     cosine = a.cos\n>     None\n\n`returns`: The cosine of `self` in radians."},{"name":"tan","documentation":"Tangent function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     tangent = a.tan\n>     None\n\n`returns`: The tangent of `self` in radians."},{"name":"sinh","documentation":"Hyperbolic sine function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     hyperbolicSine = a.sinh\n>     None\n\n`returns`: The hyperbolic sine of `self` in radians."},{"name":"cosh","documentation":"Hyperbolic cosine function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     hyperbolicCosine = a.cosh\n>     None\n\n`returns`: The hyperbolic cosine of `self` in radians."},{"name":"tanh","documentation":"Hyperbolic tangent function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     hyperbolicTangent = a.tanh\n>     None\n\n`returns`: The hyperbolic tangent of `self` in radians."},{"name":"asin","documentation":"Inverse sine function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     arcSine = a.asin\n>     None\n\n`returns`: The arc sine of `self` in radians."},{"name":"acos","documentation":"Inverse cosine function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     arcCosine = a.acos\n>     None\n\n`returns`: The arc cosine of `self` in radians."},{"name":"atan","documentation":"Inverse tangent function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     arcTangent = a.atan\n>     None\n\n`returns`: The arc tangent of `self` in radians."},{"name":"asinh","documentation":"Inverse hyperbolic sine function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     arcHyperbolicSine = a.asinh\n>     None\n\n`returns`: The inverse hyperbolic sine of `self` in radians."},{"name":"acosh","documentation":"Inverse hyperbolic cosine function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     arcHyperbolicCosine = a.acosh\n>     None\n\n`returns`: The inverse hyperbolic cosine of `self` in radians."},{"name":"atanh","documentation":"Inverse hyperbolic tangent function.\n\n> import Std.Base\n>\n> def main:\n>     a = 10.75876\n>     arcHyperbolicTangent = a.atanh\n>     None\n\n`returns`: The inverse hyperbolic tangent of `self` in radians."},{"name":"exp","documentation":"Natural exponential function.\n\n> import Std.Base\n>\n> def main:\n>     a = 100.0\n>     b = a.exp\n>     None\n\n`returns`: The constant e = 2.71828... to the power of `self`."},{"name":"ln","documentation":"Natural logarithm function.\n\n> import Std.Base\n>\n> def main:\n>     a = 100.0\n>     b = a.ln\n>     None\n\n`returns`: `self` value logarithm  to the base of the mathematical constant\ne = 2.71828... ."},{"name":"sqrt","documentation":"Square root.\n\n> import Std.Base\n>\n> def main:\n>     a = 100.0\n>     b = a.sqrt\n>     None\n\n`returns`: Square root of `self` value."}],"name":"Real","documentation":"Class representing floating point numbers."},{"methods":[{"name":"+","documentation":"Concatenates two texts together.\n\n> import Std.Base\n>\n> def main:\n>     a = \"foo\"\n>     b = \"bar\"\n>     sum = a.+ b\n>     None\n\n`that`: Text value to concatenate with `self`.\n`returns`: The result of concatenation `self` with `that` value."},{"name":"/","documentation":"Append a path segment to the given `Text`. The new segment will use\na path separator specific for current platform.\nThis is the recommended way of constructing paths.\n\n`segment`: Path segment to be appended to `self`.\n`returns`: Path resulting from appending `segment` to `self`."},{"name":">","documentation":"Tests whether `self` is greater than the argument in lexicographical order.\n\n> import Std.Base\n>\n> def main:\n>     a = \"foo\"\n>     b = \"bar\"\n>     isGreater = a.> b\n>     None\n\n`that`: Text value to compare with `self`.\n`returns`: `True` if `self` is greater than `that` in lexicographical order,\n`False` otherwise."},{"name":"<","documentation":"Tests whether `self` is lesser than the argument in lexicographical order.\n\n> import Std.Base\n>\n> def main:\n>     a = \"foo\"\n>     b = \"bar\"\n>     isLesser = a.< b\n>     None\n\n`that`: Text value to compare with `self`.\n`returns`: `True` if `self` is lesser than `that` in lexicographical order,\n`False` otherwise."},{"name":"==","documentation":"Tests wheter two texts are equal.\n\n> import Std.Base\n>\n> def main:\n>     a = \"foo\"\n>     b = \"bar\"\n>     isEqual = a.== b\n>     None\n\n`that`: Text value to compare with `self`.\n`returns`: `True` if `self` is equal to `that` in lexicographical order,\n`False` otherwise."},{"name":"toInt","documentation":"Reinterprets the string as an integer in decimal system.\nThrows an error when the text does not represent a valid integer.\n\n> import Std.Base\n>\n> def main:\n>     a = \"10\"\n>     int = a.toInt\n>     None\n\n`returns`: Integer value or error."},{"name":"toReal","documentation":"Reinterprets the string as a real number in decimal system.\nThrows an error when the text does not represent a valid real number.\n\n> import Std.Base\n>\n> def main:\n>     a = \"10.0\"\n>     real = a.toReal\n>     None\n\n`returns`: Floating point number value or error."},{"name":"toText","documentation":"Identity function, included for consistency with other types."},{"name":"shortRep","documentation":"Truncates the text for optimal display in interactive mode."},{"name":"toJSON","documentation":"Converts the text to `JSON`."},{"name":"toLQueryValue","documentation":null},{"name":"isEmpty","documentation":"Tests whether the text is empty (equal to `\"\"`).\n\n> import Std.Base\n>\n> def main:\n>     a = \"foo\"\n>     empty = a.isEmpty\n>     None\n\n`returns`: `True` if `self` is empty, `False` otherwise."},{"name":"length","documentation":"Measures the text length.\n\n> import Std.Base\n>\n> def main:\n>     a = \"foo\"\n>     len = a.length\n>     None\n\n`returns`: Integer value with text length."},{"name":"startsWith","documentation":"Tests whether the argument is a prefix of `self`.\n\n> import Std.Base\n>\n> def main:\n>     a = \"foo\"\n>     b = \"fo\"\n>     c = a.startsWith b\n>     None\n\n`p`: Prefix to check.\n`returns`: `True` if `self` is starting with `p`, `False` otherwise."},{"name":"isPrefixOf","documentation":"Tests whether `self` is a prefix of the argument.\n\n> import Std.Base\n>\n> def main:\n>     a = \"f\"\n>     b = \"foo\"\n>     c = a.isPrefixOf b\n>     None\n\n`t`: Text value to check.\n`returns`: `True` if `t` is starting with `self`, `False` otherwise."},{"name":"endsWith","documentation":"Tests whether the argument is a suffix of `self`.\n\n> import Std.Base\n>\n> def main:\n>     a = \"foo\"\n>     b = \"o\"\n>     c = a.endsWith b\n>     None\n\n`p`: Text value to check.\n`returns`: `True` if `self` is ending with `p`, `False` otherwise."},{"name":"reverse","documentation":"Reverses the text.\n\n> import Std.Base\n>\n> def main:\n>     a = \"FooBarBaz\"\n>     rev = a.reverse\n>     None\n\n`returns`: Reversed `self` text."},{"name":"isSuffixOf","documentation":"Tests whether `self` is a suffix of the argument.\n\n> import Std.Base\n>\n> def main:\n>     a = \"a\"\n>     b = \"foo\"\n>     c = a.isSuffixOf b\n>     None\n\n`t`: Text value to check.\n`returns`: `True` if `t` is ending with `self`, `False` otherwise."},{"name":"characters","documentation":"Returns a list of all characters in the text.\n\n> import Std.Base\n>\n> def main:\n>     a = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n>     b = a.characters\n>     None\n\n`returns`: List of all characters in the text."},{"name":"words","documentation":"Returns a list of all words (white-space delimited) in the text.\n\n> import Std.Base\n>\n> def main:\n>     a = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n>     b = a.words\n>     None\n\n`returns`: List of all words in the text."},{"name":"lines","documentation":"Returns a list of all lines (newline delimited) in the text.\n\n> import Std.Base\n>\n> def main:\n>     a = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n>     b = a.lines\n>     None\n\n`returns`: List of all words in the text."},{"name":"lowercase","documentation":"Changes all characters to lowercase.\n\n> import Std.Base\n>\n> def main:\n>     a = \"FooBarBaz\"\n>     b = a.lowercase\n>     None\n\n`returns`: `self` text written with lowercase."},{"name":"uppercase","documentation":"Changes all characters to uppercase.\n\n> import Std.Base\n>\n> def main:\n>     a = \"FooBarBaz\"\n>     b = a.uppercase\n>     None\n\n`returns`: `self` text written with uppercase."},{"name":"escapeJSON","documentation":null},{"name":"toBinary","documentation":"Convert the text to bare binary data."},{"name":"safeToInt","documentation":"Tries to reinterpret the string as an integer in decimal system.\nReturns `Nothing` when the text does not represent a valid integer.\n\n> import Std.Base\n>\n> def main:\n>     a = \"10\"\n>     maybeInt = a.safeToInt\n>     None\n\n`returns`: Maybe Integer value."},{"name":"safeToReal","documentation":"Tries to reinterpret the string as a real number in decimal system.\nReturns `Nothing` when the text does not represent a valid real number.\n\n> import Std.Base\n>\n> def main:\n>     a = \"10.0\"\n>     maybeReal = a.safeToReal\n>     None\n\n`returns`: Maybe floating point number value."},{"name":"addPathSegment","documentation":null}],"name":"Text","documentation":"The basic class for representing Texts."},{"methods":[{"name":"+","documentation":"Concatenates two pieces of binary data together."},{"name":"==","documentation":"Checks whether two pieces of data are equal."},{"name":"toText","documentation":"Encodes the binary object as an UTF-8 `Text`. Throws an error when the data does not represent a valid text."},{"name":"shortRep","documentation":"Displays a short representation of `Binary` object for use in interactive mode."},{"name":"length","documentation":"Measures the length in bytes of binary object."},{"name":"toBinary","documentation":"Identity function, included for consistency with other classes."},{"name":"take","documentation":"Returns a prefix consisting of the given number of bytes."},{"name":"drop","documentation":"Returns a suffix resulting from dropping the given number of bytes at the beginning."}],"name":"Binary","documentation":"Class for representing arbitrary binary data. Does not attempt to interpret\nthe data in any way."},{"methods":[{"name":"+","documentation":"Complex number addition.\n\n> import Std.Base\n>\n> def main:\n>     a = Complex 10.0 3.25\n>     b = Complex 5.0 2.25\n>     sum = a.+ b\n>     None\n\n`that`: Complex number value to add to `self`.\n`returns`: Complex number value resulting from the addition `that`\nto `self` number."},{"name":"*","documentation":"Complex number multiplication.\n\n> import Std.Base\n>\n> def main:\n>     a = Complex 10.0 3.25\n>     b = Complex 5.0 2.25\n>     multiplication = a.* b\n>     None\n\n`that`: Complex number value to multiply by `self`.\n`returns`: Complex number value resulting from the multiplication `self`\nby `that` number."},{"name":"toText","documentation":"Displays a complex number as text.\n\n> import Std.Base\n>\n> def main:\n>     a = Complex 10.0 3.25\n>     txt = a.toText\n>     None\n\n`returns`: Text value for `self` complex number."},{"name":"shortRep","documentation":"Displays a complex number as text.\n\n> import Std.Base\n>\n> def main:\n>     a = Complex 10.0 3.25\n>     b = a.shortRep\n>     None\n\n`returns`: Text value for `self` complex number."},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"real","documentation":"Field getter"},{"name":"imaginary","documentation":"Field getter"},{"name":"modulus","documentation":"Complex number modulus.\n\n> import Std.Base\n>\n> def main:\n>     a = Complex 10.0 3.25\n>     b = a.modulus\n>     None\n\n`returns`: Floating point number representing the absolute value of\nthe `self` complex number."},{"name":"modulusSquared","documentation":"Complex number squared modulus.\n\n> import Std.Base\n>\n> def main:\n>     a = Complex 10.0 3.25\n>     b = a.modulusSquared\n>     None\n\n`returns`: Floating point number representing the square absolute value of\nthe `self` complex number."},{"name":"real=","documentation":"Field setter"},{"name":"imaginary=","documentation":"Field setter"}],"name":"Complex","documentation":"Class representing complex numbers over `Real` numbers."},{"methods":[{"name":"==","documentation":"Equality of booleans, semantically the same as logical equivalence.\n\n> import Std.Base\n>\n> def main:\n>     a = True\n>     b = False\n>     isEqual = a.== b\n>     None\n\n`that`: Boolean value.\n`returns`: `True` if both operands are equal, `False` otherwise."},{"name":"toText","documentation":"Represents logical values as `Text`.\n\n> import Std.Base\n>\n> def main:\n>     a = True\n>     b = a.toText\n>     None\n\n`returns`: `self` as `Text` value."},{"name":"shortRep","documentation":"Represents logical values as `Text`.\n\n> import Std.Base\n>\n> def main:\n>     a = True\n>     b = a.shortRep\n>     None\n\n`returns`: `self` as Text value."},{"name":"toJSON","documentation":"Converts a boolean value to `JSON`.\n\n> import Std.Base\n>\n> def main:\n>     a = True\n>     b = a.toJSON\n>     None\n\n`returns`: `self` as `JSON` value."},{"name":"and","documentation":"Boolean and.\n\n> import Std.Base\n>\n> def main:\n>     a = True\n>     b = False\n>     c = a.and b\n>     None\n\n`that`: Boolean value.\n`returns`: `True` if both operands are `True`, `False` in any other case."},{"name":"or","documentation":"Boolean or.\n\n> import Std.Base\n>\n> def main:\n>     a = True\n>     b = False\n>     c = a.or b\n>     None\n\n`that`: Boolean value.\n`returns`: `False` if both operands are `False`, `True` in any other case."},{"name":"not","documentation":"Logical negation.\n\n> import Std.Base\n>\n> def main:\n>     a = True\n>     b = a.negate\n>     None\n\n`returns`: Negation of `self` value."}],"name":"Bool","documentation":"Class representing boolean values"},{"methods":[{"name":"toText","documentation":"Represents a `None` value as `Text`."},{"name":"shortRep","documentation":"Represents a `None` value as `Text`."},{"name":"toJSON","documentation":"Converts a `None` value into `JSON`."},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null}],"name":"None","documentation":"Class representing the lack of interesting value.\nMostly used for actions executed solely for their side effects, without any interesting return value."},{"methods":[{"name":"<","documentation":"Lexicographic comparison. `(a1, a2) < (b1, b2)` if a1 < b1\nor a1 == b1 and a2 < b2.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2)\n>     b = (2, 2)\n>     isLesser = a.< b\n>     None\n\n`that`: Tuple to compare with `self`.\n`returns`: `True` if `self` is lesser than `that`, `False` otherwise."},{"name":"==","documentation":"Tuple equality. Two tuples are equal when their respective elements are equal.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2)\n>     b = (2,2)\n>     isEqual = a.== b\n>     None\n\n`that`: Tuple to compare with `self`.\n`returns`: `True` if `self` and `that` are equal, `False` otherwise."},{"name":"toText","documentation":"Text representation of a tuple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2)\n>     b = a.toText\n>     None\n\n`returns`: Text representation of `self` value."},{"name":"shortRep","documentation":"Short Text representation of a pair.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2)\n>     b = a.shortRep\n>     None\n\n`returns`: Text representation of `self` value."},{"name":"toJSON","documentation":"Converts a pair into a `JSON` object."},{"name":"first","documentation":"Plucks the first element of a tuple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2)\n>     b = a.first\n>     None\n\n`returns`: First element of a tuple."},{"name":"second","documentation":"Plucks the second element of a tuple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2)\n>     b = a.second\n>     None\n\n`returns`: second element of a tuple."},{"name":"map","documentation":"Maps a function over both elements of a tuple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2)\n>     f = + 3\n>     b = a.map f\n>     None\n\n`f`: Function to map over each alement of a tuple.\n`returns`: Tuple with values being a result of mapping function `f` over all elements\nof `self` value."}],"name":"Tuple2","documentation":"Class representing pairs of elements of arbitrary type."},{"methods":[{"name":"==","documentation":"Triple equality. Two triples are equal when their respective elements are equal.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3)\n>     b = (2, 2, 3)\n>     isEqual = a.== b\n>     None\n\n`that`: Tuple to compare with `self`.\n`returns`: `True` if `self` and `that` are equal, `False` otherwise."},{"name":"toText","documentation":"Text representation of a triple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3)\n>     b = a.toText\n>     None\n\n`returns`: Text representation of `self` value."},{"name":"shortRep","documentation":"Short Text representation of a triple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3)\n>     b = a.shortRep\n>     None\n\n`returns`: Text representation of `self` value."},{"name":"toJSON","documentation":"Converts a triple into a `JSON` object."},{"name":"first","documentation":"Plucks the first element of a triple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3)\n>     b = a.first\n>     None\n\n`returns`: First element of a tuple."},{"name":"second","documentation":"Plucks the second element of a triple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3)\n>     b = a.second\n>     None\n\n`returns`: Second element of a tuple."},{"name":"map","documentation":"Maps a function over all elements of a triple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3)\n>     f = + 3\n>     b = a.map f\n>     None\n\n`f`: Function to map over each alement of a tuple.\n`returns`: Tuple with values being a result of mapping function `f` over all elements\nof `self` value."},{"name":"third","documentation":"Plucks the third element of a triple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3)\n>     b = a.third\n>     None\n\n`returns`: Third element of a tuple."}],"name":"Tuple3","documentation":"Class representing triples of elements of arbitrary type."},{"methods":[{"name":"==","documentation":"4-tuple equality. Two 4-tuples are equal when their respective elements are equal.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3, 4)\n>     b = (2, 2, 3, 4)\n>     isEqual = a.== b\n>     None\n\n`that`: Tuple to compare with `self`.\n`returns`: `True` if `self` and `that` are equal, `False` otherwise."},{"name":"toText","documentation":"Text representation of a 4-tuple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3, 4)\n>     b = a.toText\n>     None\n\n`returns`: Text representation of `self` value."},{"name":"shortRep","documentation":"Short text representation of a 4-tuple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3, 4)\n>     b = a.shortRep\n>     None\n\n`returns`: Text representation of `self` value."},{"name":"toJSON","documentation":"Converts a 4-tuple to a `JSON` object."},{"name":"first","documentation":"Plucks the first element of a 4-tuple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3, 4)\n>     b = a.first\n>     None\n\n`returns`: First element of a tuple."},{"name":"second","documentation":"Plucks the second element of a 4-tuple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3, 4)\n>     b = a.second\n>     None\n\n`returns`: Second element of a tuple."},{"name":"map","documentation":"Maps a function over all elements of a 4-tuple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3, 4)\n>     f = + 3\n>     b = a.map f\n>     None\n\n`f`: Function to map over each alement of a tuple.\n`returns`: Tuple with values being a result of mapping function `f` over all elements of `self` value."},{"name":"third","documentation":"Plucks the third element of a 4-tuple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3, 4)\n>     b = a.third\n>     None\n\n`returns`: Third element of a tuple."},{"name":"fourth","documentation":"Plucks the fourth element of a 4-tuple.\n\n> import Std.Base\n>\n> def main:\n>     a = (1, 2, 3, 4)\n>     b = a.fourth\n>     None\n\n`returns`: Fourth element of a tuple."}],"name":"Tuple4","documentation":"Class representing 4-tuples of elements of arbitrary type."},{"methods":[{"name":"==","documentation":"Checks the equality of two `Maybe` values.\n\n> import Std.Base\n>\n> def main:\n>     a = Just \"foo\"\n>     b = Just \"bar\"\n>     isEqual = a.== b\n>     None\n\n`that`: `Maybe` value to compare with `self`.\n`returns`: `True` when both values are `Nothing` or when they are `Just`\nand the values inside are equal."},{"name":"toText","documentation":"Text representation of a `Maybe` object.\n\n> import Std.Base\n>\n> def main:\n>     a = Just \"foo\"\n>     b = a.toText\n>     None\n\n`returns`: Text representation of `self` value."},{"name":"shortRep","documentation":"Short text representation of a `Maybe` object.\n\n> import Std.Base\n>\n> def main:\n>     a = Just \"foo\"\n>     b = a.shortRep\n>     None\n\n`returns`: Text representation of `self` value."},{"name":"toJSON","documentation":"Converts a `Maybe` object to `JSON`."},{"name":"map","documentation":"Takes a function `f` and returns `Just (f a)` when called on `Just a`\nand `Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     a = Just 8\n>     f = + 3\n>     b = a.map f\n>     None\n\n`f`: Function to map.\n`returns`: `Just (f a)` when `self` is `Just a` and `Nothing` otherwise."},{"name":"toList","documentation":"Cast a `Maybe` value into a `List`.\nReturns an empty list when the value is missing and a singleton list otherwise.\n\n> import Std.Base\n>\n> def main:\n>     a = Just \"foo\"\n>     list = a.toList\n>     None\n\n`returns`: An empty list when the value is missing and a singleton list otherwise."},{"name":"get","documentation":"Returns the value when called on `Just`, throws an error otherwise.\n\n> import Std.Base\n>\n> def main:\n>     a = Just \"foo\"\n>     b = a.get\n>     None\n\n`returns`: The value when called on `Just`, an error otherwise."},{"name":"withDefault","documentation":"Returns the value when called on `Just` or the provided default value\nwhen called on a `Nothing`.\n\n> import Std.Base\n>\n> def main:\n>     a = Nothing\n>     b = a.withDefault \"bar\"\n>     None\n\n`defVal`: Default value to return when `self` is `Nothing`.\n`returns`: The value when called on `Just` or `defVal` otherwise."},{"name":"isJust","documentation":"Returns `True` when called on a `Just` and `False` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     a = Nothing\n>     b = a.isJust\n>     None\n\n`returns`: `True` if `self` is `Just`, `False` otherwise."},{"name":"isNothing","documentation":"Returns `True` when called on a `Nothing` and `False` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     a = Nothing\n>     b = a.isNothing\n>     None\n\n`returns`: `True` if `self` is `Nothing`, `False` otherwise."},{"name":"flatMap","documentation":"Takes a function returning `Maybe`, maps it over `self` and flattens the result.\n\n> import Std.Base\n>\n> def main:\n>     a = Just [8, 10, 12]\n>     b = a.flatMap head\n>     None\n\n`f`: Function to map.\n`returns`: `f a` when `self` is `Just a` and `Nothing` otherwise."},{"name":"each","documentation":"A variant of `map` that executes any effects performed by the function.\n\n> import Std.Base\n>\n> def main:\n>     a = Just [8, 10, 12]\n>     f = + 3\n>     b = a.each f\n>     None\n\n`f`: Function to map.\n`returns`: `Just (f a)` when `self` is `Just a` and `Nothing` otherwise."},{"name":"flatten","documentation":"Flattens nested `Maybe` values. Returns `Just a` when called on `Just (Just a)`\nand `Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     a = Just (Just \"foo\")\n>     b = a.flatten\n>     None\n\n`returns`: `Just a` when `self` is `Just (Just a)` and `Nothing` otherwise."}],"name":"Maybe","documentation":"The basic optional type in Luna. The value of this class can either be a `Nothing`\n(representing the lack of value) or a `Just value` (in the case value is present).\nThis is a type-safe substitute for nullable values known from other languages."},{"methods":[{"name":"==","documentation":"Checks whether two `Either` values are equal.\nReturns `True` when both values are `Left` or both are `Right`\nand when the contained values are equal."},{"name":"toText","documentation":"Text representation of an `Either` value."},{"name":"shortRep","documentation":"Short text representation of an `Either` value."},{"name":"toJSON","documentation":"Converts an `Either` value into a `JSON` object."},{"name":"map","documentation":"Runs the provided function on a `Right` value and returns `Left` values unchanged.\n`a.map f` is the same as `a.either id f`."},{"name":"flatMap","documentation":"Takes a function returning an `Either` and runs it when run on a `Right`.\nReturns the `Left` value unchangeds."},{"name":"either","documentation":"Takes two functions returning the same type, calls the first when called\non `Left` and the second for `Right`."},{"name":"toMaybe","documentation":"Convert an `Either a b` into a `Maybe` by turning a `Left` into `Nothing` (thus forgetting the value in this case) and a `Right a` into `Just a`."},{"name":"isLeft","documentation":"Checks whether the value is `Left a`."},{"name":"isRight","documentation":"Checks whether the value is `Right a`."},{"name":"left","documentation":"Returns `a` when called on a `Left a`, throws an error otherwise."},{"name":"right","documentation":"Returns `a` when called on a `Right a`, throws an error otherwise."}],"name":"Either","documentation":"`Either` represents an alternative of two different values – either one or the other is present."},{"methods":[{"name":"+","documentation":"List concatenation.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     b = [10,11,12,13]\n>     c = a.+ b\n>     None\n\n`that`: List to concatenate with `self`.\n`returns`: List object, the result of concatenation `self` with `that` value."},{"name":"==","documentation":"List equality. Two lists are equal when they have the same length\nand their respective elements are equal.\n\n> import Std.Base\n>\n> def main:\n>     a = [11,2,30]\n>     b = [11,2,31]\n>     c = a.== b\n>     None\n\n`that`: List to compare with `self`.\n`returns`: `True` when `self` and `that` have the same length and their\nrespective elements are equal, `False` in any other case."},{"name":"toText","documentation":"Text represenation of a list.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     txt = a.toText\n>     None\n\n`returns`: Text representation of the `self` list."},{"name":"shortRep","documentation":"Short text representation of a list.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     b = a.shortRep\n>     None\n\n`returns`: Short text representation of the `self` list."},{"name":"toJSON","documentation":"Converts a list to a `JSON` object."},{"name":"isEmpty","documentation":"Tests whether the list is empty.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     b = a.isEmpty\n>     None\n\n`returns`: `True` if list is empty, `False` otherwise."},{"name":"length","documentation":"Computes the length of a list.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     len = a.length\n>     None\n\n`returns`: Length of the `self` list."},{"name":"reverse","documentation":"Reverses the list.\n\n> import Std.Base\n>\n> def main:\n>     a = [\"a\", \"b\", \"c\", \"d\"]\n>     b = \"foo\"\n>     f = +\n>     c = a.fold b f\n>     None\n\n`a`: Initial value.\n`f`: Function to call on `self` list.\n`returns`: The result of repeatedly calling the function on the next list\nelement and the current accumulator."},{"name":"take","documentation":"Returns the list prefix of a given length or the whole list,\nwhen the requested prefix is longer than the list.\n\n> import Std.Base\n>\n> def main:\n>     a = [1, 2, 3, 4]\n>     b = a.take 2\n>     None\n\n`i`: Int value describing number of elements to take from `self` list.\n`returns`: List object containing first `i` elements from `self` list."},{"name":"drop","documentation":"Returns the list without the prefix of a requested length, or an empty list\nif the number of dropped elements is larger than the list length.\n\n> import Std.Base\n>\n> def main:\n>     a = [1, 2, 3, 4]\n>     b = a.drop 2\n>     None\n\n`i`: Int value describing number of elements to remove from `self` list.\n`returns`: New list object created by deleting first `i` elements from `self` list."},{"name":"map","documentation":"Maps a function over each element of the list.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     f = + 3\n>     b = a.map f\n>     None\n\n`f`: Function to map over all elements of the `self` list.\n`returns`: List object with elements being result of applying `f` function\nover `self` list."},{"name":"flatMap","documentation":"Maps a list-returning function over each element and concatenates the results.\n\n> import Std.Base\n>\n> def main:\n>     a = [\"foo\", \"bar\"]\n>     b = flatMap (_.characters)\n>     None\n\n`f`: List-returning function.\n`returns`: List being a result of applying `f` to each element of\n`self` and concatenation."},{"name":"each","documentation":"Maps a function over each element of the list, immediately executing\nall side effects and returning a list of results.\n\n> import Std.Base\n>\n> def main:\n>     a = [1, 2, 3, 4]\n>     f = + 3\n>     b = a.each f\n>     None\n\n`f`: Function to map over all elements of the `self` list.\n`returns`: List object with elements being result of applying `f` function over `self` list."},{"name":"head","documentation":"Returns `Just` the first element when the list is not empty, `Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     b = a.head\n>     None\n\n`returns`: `Just` the first element when the list is not empty,\n`Nothing` otherwise."},{"name":"last","documentation":"Returns `Just` the last element when the list is not empty, `Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     b = a.last\n>     None\n\n`returns`: `Just` the last element when the list is not empty, `Nothing` otherwise."},{"name":"tail","documentation":"Returns `Just` the list without the first element when the list is not empty,\n`Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     b = a.tail\n>     None\n\n`returns`: `Just` the list without the first element when the list is not empty,\n`Nothing` otherwise."},{"name":"prepend","documentation":"Prepends an element to the list.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     b = 11\n>     c = a.prepend b\n>     None\n\n`a`: Element to prepend to `self` list.\n`returns`: `self` list prepended with `a` element."},{"name":"sequence","documentation":"Executes the actions from each element of the list."},{"name":"at","documentation":"Returns `Just` the element at a given position in the list.\nReturns `Nothing` when the index does not exist.\n\n> import Std.Base\n>\n> def main:\n>     a = [1, 2, 3, 4]\n>     b = a.at 2\n>     None\n\n`n`: Int value, index of value to return from `self` list.\n`returns`: `Just` the element at a given position in the `self` list,\n`Nothing` when index does not exist."},{"name":"getAt","documentation":"Returns the element at a given position in the list.\nThrows an error when the index does not exist.\n\n> import Std.Base\n>\n> def main:\n>     a = [1, 2, 3, 4]\n>     b = a.getAt 2\n>     None\n\n`n`: Int value, index of value to return from `self` list.\n`returns`: The element at a given position in the `self` list."},{"name":"fold","documentation":"Takes an initial value and a function. Returns the result of repeatedly\ncalling the function on the next list element and the current accumulator.\n\n> import Std.Base\n>\n> def main:\n>     a = [1, 2, 3, 4]\n>     b = 10\n>     f = +\n>     c = a.fold b f\n>     None\n\n`a`: Initial value.\n`f`: Function to call on `self` list.\n`returns`: The result of repeatedly calling the function on the next\nlist element and the current accumulator."},{"name":"foldLeft","documentation":"Takes an initial value and a function. Returns the result of repeatedly\ncalling the function on the next list element and the current accumulator.\n\n> import Std.Base\n>\n> def main:\n>     a = [\"a\", \"b\", \"c\", \"d\"]\n>     b = \"foo\"\n>     f = +\n>     c = a.foldLeft b f\n>     None\n\n`a`: Initial value.\n`f`: Function to call on `self` list.\n`returns`: The result of repeatedly calling the function on the next list\nelement and the current accumulator."},{"name":"makeText","documentation":"Converts a list into text by converting each element to text\nand concatenating them using the provided separator.\n\n> import Std.Base\n>\n> def main:\n>     a = [3, \"little\", \"pigs\"]\n>     b = \" \"\n>     c = a.makeText b\n>     None\n\n`sep`: Separator.\n`returns`: Text object from `self` elements concatenated with `sep`."},{"name":"prependAll","documentation":"Private."},{"name":"intersperse","documentation":"Inserts an element between every two elements of a list.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     b = \"foo\"\n>     c = a.intersperse b\n>     None\n\n`sep`: An element to insert.\n`returns`: The `self` list with `sep` between every two elements."},{"name":"filter","documentation":"Returns a list of all the elements for which the given predicate returns `True`.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3,4]\n>     f = < 3\n>     c = a.filter f\n>     None\n\n`f`: Filtering function, should return Boolean value.\n`returns`: List object with elements of `self` fulfilling the `f` predicate."},{"name":"merge","documentation":"Private."},{"name":"sortBy","documentation":"Sorts the list in an increasing order by the results of the given function."},{"name":"privChunkBy","documentation":"Private."},{"name":"chunkBy","documentation":"Chunks the list into lists of consecutive values returning the same value of a given function.\nFor example:\n```\n[1, 2, 3, 4, 2, 2].chunkBy (> 2)    # => [(False, [1, 2]), (True, [3, 4]), (False, [2, 2])]\n```"},{"name":"groupBy","documentation":"Groups the list into lists of values returning the same value of a given function.\nRequires the return value of the function to be ordered.\nFor example:\n```\n[1, 2, 3, 4, 2, 2].chunkBy (> 2)    # => [(False, [1, 2, 2, 2]), (True, [3, 4])]\n```"},{"name":"sort","documentation":"Sorts the list in an increasing order.\n\n> import Std.Base\n>\n> def main:\n>     a = [7,1,4,3]\n>     b = a.sort\n>     None\n\n`returns`: List object with elements of `self` in increasing order."},{"name":"privPrefixes","documentation":"Private."},{"name":"prefixes","documentation":"Returns a list of all prefixes of the given list."},{"name":"zipWith","documentation":"Returns a list resulting from combining respective elements of two lists with the provided function.\nThe length of the result is the length of the shorter of the lists.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3]\n>     b = [10,11,12]\n>     c = a.zipWith (*) b\n>     None\n\n`f`: Function to combine elements of `self` and `that` list.\n`that`: List object to combine with `self`.\n`returns`: List object with elements being a result of combining elements\nfrom `self` and `that` list using function `f`."},{"name":"zip","documentation":"Returns a list of pairs of respective elements of two lists.\nThe length of the result is the length of the shorter of the lists.\n\n> import Std.Base\n>\n> def main:\n>     a = [1,2,3]\n>     b = [10,11,12]\n>     c = a.zip b\n>     None\n\n`l`: List object to combine with `self`.\n`returns`: List of pairs of respective elements of two lists - `self` and `l`."},{"name":"all","documentation":"Checks whether all elements of a list satisfy a provided predicate.\n\n> import Std.Base\n>\n> def main:\n>     a = [11,2,30]\n>     f = < 10\n>     c = a.all f\n>     None\n\n`f`: Boolean valued function.\n`returns`: `True` if all of the `self` list elements statisfies predicate `f`,\n`False` otherwise."},{"name":"any","documentation":"Checks whether any element of a list satisfies a provided predicate.\n\n> import Std.Base\n>\n> def main:\n>     a = [11,2,30]\n>     f = < 10\n>     c = a.any f\n>     None\n\n`f`: Boolean valued function.\n`returns`: `True` if any of the `self` list elements statisfies predicate `f`,\n`False` otherwise."},{"name":"collect","documentation":"Takes a list of `Maybes` and returns a list of all the `Just` elements.\n\n> import Std.Base\n>\n> def main:\n>     a = [Nothing, Just \"foo\", Just 10, Just \"bar\"]\n>     b = a.collect\n>     None\n\n`returns`: List of all the `Just` elements from `self`."},{"name":"concat","documentation":"Takes a list of lists and concatenates them into a single list.\n\n> import Std.Base\n>\n> def main:\n>     a = [[1,2], [11,12], [21,22]]\n>     b = a.concat\n>     None\n\n`returns`: Single list from `self`."},{"name":"contains","documentation":"Checks whether the list contains a given element.\n\n> import Std.Base\n>\n> def main:\n>     a = [\"foo\", \"bar\"]\n>     b = \"baz\"\n>     c = a.contais b\n>     None\n\n`elem`: Element to check.\n`returns`: `True` if `self` contains `elem`, `False` otherwise."},{"name":"takeWhile","documentation":"Returns the longest prefix of the list for which a given predicate is satisfied.\n\n> import Std.Base\n>\n> def main:\n>     a = [49,23,6,12,4,6,1,9]\n>     f = > 10\n>     b = a.takeWhile f\n>     None\n\n`pred`: Boolean-valued function to check.\n`returns`: The longest prefix of the `self` list for which a given predicate\n`pred` is satisfied."}],"name":"List","documentation":"Lists of arbitrary length, consisting of elements of the same type."},{"methods":[{"name":"==","documentation":"Map equality. Two maps are equal when they contain the same keys\nand the elements associated with each key are equal.\n\n> import Std.Base\n>\n> def main:\n>     a = Map.singleton \"foo\" 10\n>     b = Map.singleton \"bar\" 10\n>     c = a.== b\n>     None\n\n`b`: Map to compare with `self` map.\n`returns`: `True` if two maps are equal, `False` otherwise."},{"name":"toText","documentation":null},{"name":"toJSON","documentation":"Converts a map with `Text` keys to JSON."},{"name":"isEmpty","documentation":"Tests whether the map is empty.\n> def main:\n>     a = Map.empty\n>     b = a.isEmpty\n>     None\n\n`returns`: `True` if `self` is the empty map, `False` otherwise."},{"name":"map","documentation":"Applies a function to each value in the map.\n\n> import Std.Base\n>\n> def main:\n>     a = Map.singleton \"foo\" 10\n>     f = * 10\n>     b = a.map f\n>     None\n\n`f`: Function to map over all elements of the `self` map.\n`returns`: Map object with elements being result of applying `f` function over `self` map."},{"name":"toList","documentation":"Converts the map into a list of `(key, value)` pairs.\n\n> import Std.Base\n>\n> def main:\n>     a = Map.singleton \"foo\" 10\n>     b = a.toList\n>     None\n\n`returns`: A list of (key, value) pairs from the `self` map."},{"name":"get","documentation":"Gets an element for a given key. Throws an exception when the key is not present in the Map.\n\n> import Std.Base\n>\n> def main:\n>     a = Map.singleton \"foo\" 10\n>     b = a.get \"foo\"\n>     None\n\n`k`: Key in `self` map to lookup for.\n`returns`: Value for the key `k` from `self` map if the `k` exist.\nThrows an exception when the `k` key is not present in the `self` Map."},{"name":"empty","documentation":"Returns an empty map.\n\n> import Std.Base\n>\n> def main:\n>     a = Map.empty\n>     None\n\n`returns`: The empty map."},{"name":"singleton","documentation":"Returns a map with a single element.\n\n> import Std.Base\n>\n> def main:\n>     a = Map.singleton \"foo\" 10\n>     None\n\n`k`: Element key.\n`v`: Element value.\n`returns`: The map with single element."},{"name":"size","documentation":"Returns the number of values stored in the map.\n\n> import Std.Base\n>\n> def main:\n>     a = Map.singleton \"foo\" 10\n>     b = a.size\n>     None\n\n`returns`: Int value, number of values stored in the `self` map."},{"name":"lookup","documentation":"Looks up an element for a given key.\n\n> import Std.Base\n>\n> def main:\n>     a = Map.singleton \"foo\" 10\n>     b = a.lookup \"foo\"\n>     None\n\n`k`: Key in `self` map to lookup for.\n`returns`: `Just` value for the key `k` from `self` map if the key exist.\n`Nothing` if the `k` key is not present in the `self` map."},{"name":"insert","documentation":"Inserts an element at a given key.\n\n> import Std.Base\n>\n> def main:\n>     a = Map.singleton \"foo\" 10\n>     k = \"bar\"\n>     v = 23\n>     b = a.insert k v\n>     None\n\n`k`: Key for a new element to insert to `self` map.\n`v`: Value for a new element to insert to `self` map.\n`returns`: Map containing elements of the `self` map and a newly inserted element."},{"name":"bin","documentation":null},{"name":"delta","documentation":null},{"name":"ratio","documentation":null},{"name":"singleL","documentation":null},{"name":"singleR","documentation":null},{"name":"doubleL","documentation":null},{"name":"doubleR","documentation":null},{"name":"rotateL","documentation":null},{"name":"rotateR","documentation":null},{"name":"balance","documentation":null},{"name":"balanceL","documentation":null},{"name":"balanceR","documentation":null},{"name":"maxView","documentation":null},{"name":"minView","documentation":null},{"name":"glue","documentation":null},{"name":"delete","documentation":"Deletes a key from the given map. If the the key is missing,\nit returns the original map.\n\n> import Std.Base\n>\n> def main:\n>     a = Map.singleton \"foo\" 10\n>     b = a.delete \"foo\"\n>     None\n\n`key`: Key to delete from `self` map.\n`returns`: Map containing elements of the `self` map without `key`.\nIf the the key is missing, it returns the `self` map."}],"name":"Map","documentation":"Represents a dictionary from keys of given type to values of given type.\nThe keys need to have ordering defined."},{"methods":[{"name":"==","documentation":"Tests two `JSON` objects for equality.\nJSON objects are considered equal if they represent the same kind of data\nand if stored data (when present) in both objects compares equal.\n\n> import Std.Base\n>\n> def main:\n>     txt1 = '{\"bar\":20}'\n>     json1 = JSON.parse txt1\n>     txt2 = '{\"bar\":20}'\n>     json2 = JSON.parse txt2\n>     isEqual = json1.== json2\n>     None\n\n`that`: `JSON` object to compare with `self`.\n`returns`: `True` if `that` is equal with `self`, `False` otherwise."},{"name":"toText","documentation":"Dumps a `JSON` structure into a `Text` object.\n\n> import Std.Base\n>\n> def main:\n>     a = JSON.empty\n>     b = a.insert \"foo\" 10\n>     txt = b.toText\n>     None\n\n`returns`: Text representation of `self` `JSON` object."},{"name":"shortRep","documentation":"Short text representation for a `JSON` object.\n\n> import Std.Base\n>\n> def main:\n>     a = JSON.empty\n>     b = a.insert \"foo\" 10\n>     c = b.shortRep\n>     None\n\n`returns`: Short text representation of `self` `JSON` object."},{"name":"toJSON","documentation":"Identity. Included for consistency with other classes."},{"name":"toBinary","documentation":"Dumps a `JSON` structure into a `Binary` object, by rendering it\ninto `Text` and converting it to `Binary`.\n\n> import Std.Base\n>\n> def main:\n>     a = JSON.empty\n>     b = a.insert \"foo\" 10\n>     binary = b.toBinary\n>     None\n\n`returns`: Binary representation of `self` `JSON` object."},{"name":"get","documentation":"Returns the value associated with a given key. Throws an error when\nthe `JSON` is not an object or the key is missing.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\":20, \"foo\": 10}'\n>     json = JSON.parse txt\n>     k = \"bar\"\n>     value = json.get k\n>     None\n\n`key`: Key to lookup in `self`.\n`returns`: The value associated with the `key`,\nan error if the `JSON` is not an object or when the `key` is missing."},{"name":"at","documentation":"Returns `Just` the element with a given index assuming the `JSON`\nrepresents an array and the index is in range. Returns `Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     json = JSONArray [JSONString \"a\", JSONString \"b\"]\n>     list = json.at 1\n>     None\n\n`n`: Index of element to get.\n`returns`: `Just` the element with a given index assuming the `JSON`\nrepresents an array and the index is in range, `Nothing` otherwise."},{"name":"getAt","documentation":"Returns the element with a given index assuming the `JSON` represents\nan array and the index is in range. Throws an error otherwise.\n\n> import Std.Base\n>\n> def main:\n>     json = JSONArray [JSONString \"a\", JSONString \"b\"]\n>     list = json.at 1\n>     None\n\n`n`: Index of element to get.\n`returns`: The element with a given index assuming the `JSON`\nrepresents an array and the index is in range, throws an error otherwise."},{"name":"empty","documentation":"Returns an empty `JSON` object.\n\n> import Std.Base\n>\n> def main:\n>     a = JSON.empty\n>     None\n\n`returns`: An empty `JSON` object."},{"name":"lookup","documentation":"Returns `Just` the value associated with a given key. Returns `Nothing`\nwhen the `JSON` is not an object or when the key is missing.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\":20, \"foo\": 10}'\n>     json = JSON.parse txt\n>     k = \"bar\"\n>     maybeValue = json.lookup k\n>     None\n\n`key`: Key to lookup in `self`.\n`returns`: `Just` the value associated with the `key`,\n`Nothing` if the `JSON` is not an object or when the `key` is missing."},{"name":"insert","documentation":"Inserts a value for a given key into the `JSON` object.\nThrows an exception when the `JSON` does not represent an object.\n\n> import Std.Base\n>\n> def main:\n>     a = JSON.empty\n>     k = \"foo\"\n>     v = 10\n>     b = a.insert k v\n>     None\n\n`k`: A key for a value to insert to `self` JSON object.\n`v`: A value to insert to `self` JSON object.\n`returns`: A `JSON` object containing elements from `self` object and newly inserted element."},{"name":"delete","documentation":"Deletes a value for a given key from the `JSON` object. Does nothing when\nthe `JSON` does not represent an object or does not contain the key.\n\n> import Std.Base\n>\n> def main:\n>     txt1 = '{\"bar\":20, \"foo\": 10}'\n>     json1 = JSON.parse txt1\n>     k = \"bar\"\n>     json2 = json1.delete k\n>     None\n\n`k`: Key for value to delete from `self`.\n`returns`: `JSON` object with `self` object elements despite the value with the key `k`."},{"name":"safeParse","documentation":"Parses a `Text` into a `JSON` object. Returns `Left` containing error\nmessage when the `Text` does not contain a valid `JSON` object.\n\n> import Std.Base\n>\n> def main:\n>     a = '{\"foo\":10, \"bar\":20}'\n>     b = JSON.safeParse a\n>     None\n\n`data`: Text to parse as `JSON` object.\n`returns`: `Either` `JSON` object or an error."},{"name":"parse","documentation":"Parses a `Text` into a `JSON` object. Throws an error when the `Text`\ndoes not contain a valid `JSON` object.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"foo\":10, \"bar\":20}'\n>     json = JSON.parse txt\n>     None\n\n`data`: Text to parse as `JSON` object.\n`returns`: `JSON` object or an error."},{"name":"render","documentation":"Dumps a `JSON` structure into a `Text` object.\n\n> import Std.Base\n>\n> def main:\n>     a = JSON.empty\n>     b = a.insert \"foo\" 10\n>     txt = b.render\n>     None\n\n`returns`: Text representation of `self` `JSON` object."},{"name":"has","documentation":"Checks if given key is present in the structure.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\":20, \"foo\": 10}'\n>     json = JSON.parse txt\n>     k = \"bar\"\n>     hasKey = json.has k\n>     None\n\n`key`: Key to check in `self`.\n`returns`: `True` if the `key` is present in `self` structure, `False` otherwise."},{"name":"asObject","documentation":"Returns a `Map` from `Text` to `JSON`, assuming the `JSON` represents\nan object. Throws an error otherwise.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\":20, \"foo\": 10}'\n>     json = JSON.parse txt\n>     object = json.asObject\n>     None\n\n`returns`: A `Map` from `Text` to `JSON`, assuming the `self` represents\nan object. Throws an error otherwise."},{"name":"asText","documentation":"Returns a `Text` assuming the `JSON` represents text.\nThrows an error otherwise.\n\n> import Std.Base\n>\n> def main:\n>     json = JSONString \"foo\"\n>     txt = json.asText\n>     None\n\n`returns`: A `Text` assuming the `JSON` represents text.\nThrows an error otherwise."},{"name":"asReal","documentation":"Returns a `Real` assuming the `JSON` represents a number.\nThrows an error otherwise.\n\n> import Std.Base\n>\n> def main:\n>     scientificNumber = Scientific 10 0\n>     json = JSONNumber scientificNumber\n>     number = json.asReal\n>     None\n\n`returns`: A `Real` assuming the `JSON` represents number.\nThrows an error otherwise."},{"name":"asInt","documentation":"Returns an `Int` assuming the `JSON` represents a number and it\ndidn't contain a decimal point. Throws an error otherwise.\n\n> import Std.Base\n>\n> def main:\n>     scientificNumber = Scientific 10 0\n>     json = JSONNumber scientificNumber\n>     int = json.asInt\n>     None\n\n`returns`: A `Int` assuming the `JSON` represents number and it\ndidn't contain a decimal point. Throws an error otherwise."},{"name":"asBool","documentation":"Returns a `Bool` assuming the `JSON` represents a boolean.\nThrows an error otherwise.\n\n> import Std.Base\n>\n> def main:\n>     json = JSONBool False\n>     bool = json.asBool\n>     None\n\n`returns`: A `Bool` assuming the `JSON` represents a boolean.\nThrows an error otherwise."},{"name":"asList","documentation":"Returns a list of `JSON` object assuming the `JSON` represents an array.\nThrows an error otherwise.\n\n> import Std.Base\n>\n> def main:\n>     json = JSONArray [JSONString \"a\", JSONString \"b\"]\n>     list = json.asList\n>     None\n\n`returns`: A list of `JSON` object assuming the `JSON` represents an array.\nThrows an error otherwise."},{"name":"safeAsObject","documentation":"Returns `Just` a `Map` from `Text` to `JSON`, assuming the `JSON`\nrepresents an object. Returns `Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\":20, \"foo\": 10}'\n>     json = JSON.parse txt\n>     object = json.safeAsObject\n>     None\n\n`returns`: `Just` a `Map` from `Text` to `JSON`, assuming the `JSON`\nrepresents an object. `Nothing` otherwise."},{"name":"safeAsText","documentation":"Returns `Just` a `Text` assuming the `JSON` represents text.\nReturns `Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     json = JSONString \"foo\"\n>     txt = json.safeAsText\n>     None\n\n`returns`: `Just` a `Text` assuming the `JSON` represents text.\n`Nothing` otherwise."},{"name":"safeAsReal","documentation":"Returns `Just` a `Real` assuming the `JSON` represents a number.\nReturns `Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     scientificNumber = Scientific 10 0\n>     json = JSONNumber scientificNumber\n>     number = json.safeAsReal\n>     None\n\n`returns`: `Just` a `Real` assuming the `JSON` represents a number.\n`Nothing` otherwise."},{"name":"safeAsInt","documentation":"Returns `Just` an `Int` assuming the `JSON` represents a number and it\ndidn't contain a decimal point. Returns `Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     scientificNumber = Scientific 10 0\n>     json = JSONNumber scientificNumber\n>     number = json.safeAsInt\n>     None\n\n`returns`: `Just` an `Int` assuming the `JSON` represents a number and it\ndidn't contain a decimal point. `Nothing` otherwise."},{"name":"safeAsBool","documentation":"Returns `Just` a `Bool` assuming the `JSON` represents a boolean.\nReturns `Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     json = JSONBool False\n>     bool = json.safeAsBool\n>     None\n\n`returns`: `Just` a `Bool` assuming the `JSON` represents a boolean.\n`Nothing` otherwise."},{"name":"safeAsList","documentation":"Returns `Just` a list of `JSON` object assuming the `JSON` represents\nan array. Returns `Nothing` otherwise.\n\n> import Std.Base\n>\n> def main:\n>     json = JSONArray [JSONString \"a\", JSONString \"b\"]\n>     list = json.safeAsList\n>     None\n\n`returns`: `Just` a list of `JSON` object assuming the `JSON` represents\nan array. `Nothing` otherwise."},{"name":"getObject","documentation":"Gets a `Map` from `Text` to `JSON` associated with a given key.\nThrows an error when the `JSON` is not an object, the key is not present\nor the associated value is not an object.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"a\": {\"bar\":20, \"foo\": 10}, \"b\": {\"bar\":220, \"foo\": 110}}'\n>     json = JSON.parse txt\n>     object = json.getObject \"a\"\n>     None\n\n`k`: Key to lookup in `self`.\n`returns`: A `Map` from `Text` to `JSON` associated with a given key."},{"name":"getText","documentation":"Gets a `Text` associated with a given key.\nThrows an error when the `JSON` is not an object, the key is not present\nor the associated value is not a text.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\":\"a\", \"foo\": \"b\"}'\n>     json = JSON.parse txt\n>     txt = json.getText \"foo\"\n>     None\n\n`k`: Key to lookup in `self`.\n`returns`: A `Text` associated with a given key."},{"name":"getReal","documentation":"Gets a `Real` associated with a given key. Throws an error when\nthe `JSON` is not an object, the key is not present\nor the associated value is not a number.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\": 20.0, \"foo\": 10.5}'\n>     json = JSON.parse txt\n>     number = json.getReal \"bar\"\n>     None\n\n`k`: Key to lookup in `self`.\n`returns`: A`Real` associated with a given key."},{"name":"getInt","documentation":"Gets an `Int` associated with a given key. Throws an error when the\n`JSON` is not an object, the key is not present or the associated value\nis not an integer.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\": 20, \"foo\": 10}'\n>     json = JSON.parse txt\n>     number = json.getInt \"bar\"\n>     None\n\n`k`: Key to lookup in `self`.\n`returns`: An `Int` associated with a given key."},{"name":"getBool","documentation":"Gets a `Bool` associated with a given key. Throws an error when the\n`JSON` is not an object, the key is not present or the associated value\nis not a boolean.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\": True, \"foo\": 10}'\n>     json = JSON.parse txt\n>     bool = json.getBool \"bar\"\n>     None\n\n`k`: Key to lookup in `self`.\n`returns`: A `Bool` associated with a given key."},{"name":"getList","documentation":"Gets a `List` of `JSON` values associated with a given key. Throws\nan error when the `JSON` is not an object, the key is not present\nor the associated value is not an array.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"foo\": [1, 2, 2]}'\n>     json = JSON.parse txt\n>     list = json.getList \"foo\"\n>     None\n\n`k`: Key to lookup in `self`.\n`returns`: A `List` of `JSON` values associated with a given key."},{"name":"lookupObject","documentation":"Looks up a `Map` from `Text` to `JSON` associated with a given key.\nReturns `Nothing` when the `JSON` is not an object, the key is not\npresent or the associated value is not an object.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"a\": {\"bar\":20, \"foo\": 10}, \"b\": {\"bar\":220, \"foo\": 110}}'\n>     json = JSON.parse txt\n>     object = json.lookupObject \"a\"\n>     None\n\n`k`: Key to lookup in `self`.\n`returns`: `Just` `Map` from `Text` to `JSON` associated with a given key."},{"name":"lookupText","documentation":"Looks up a `Text` associated with a given key. Returns `Nothing` when\nthe `JSON` is not an object, the key is not present or the associated\nvalue is not a text.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\":\"a\", \"foo\": \"b\"}'\n>     json = JSON.parse txt\n>     txt = json.lookupText \"foo\"\n>     None\n\n`k`: Key to lookup in `self`.\n`returns`: `Just` `Text` associated with a given key."},{"name":"lookupReal","documentation":"Looks up a `Real` associated with a given key. Returns `Nothing` when\nthe `JSON` is not an object, the key is not present or the associated\nvalue is not a number.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\": 20.0, \"foo\": 10.5}'\n>     json = JSON.parse txt\n>     number = json.lookupReal \"bar\"\n>     None\n\n`k`: Key to lookup in `self`.\n`returns`: `Just` `Real` associated with a given key."},{"name":"lookupInt","documentation":"Looks up an `Int` associated with a given key. Returns `Nothing` when\nthe `JSON` is not an object, the key is not present or the associated\nvalue is not an integer.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\": 20, \"foo\": 10}'\n>     json = JSON.parse txt\n>     number = json.lookupInt \"bar\"\n>     None\n\n`k`: Key to lookup in `self`.\n`returns`: `Just` `Int` associated with a given key."},{"name":"lookupBool","documentation":"Looks up a `Bool` associated with a given key. Returns `Nothing` when\nthe `JSON` is not an object, the key is not present or the associated\nvalue is not a boolean.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"bar\": True, \"foo\": 10}'\n>     json = JSON.parse txt\n>     bool = json.lookupBool \"bar\"\n>     None\n\n`k`: Key to lookup in `self`.\n`returns`: `Just` `Bool` associated with a given key."},{"name":"lookupList","documentation":"Looks up a `List` of `JSON` values associated with a given key.\nReturns `Nothing` when the `JSON` is not an object, the key is not\npresent or the associated value is not an array.\n\n> import Std.Base\n>\n> def main:\n>     txt = '{\"foo\": [1, 2, 2]}'\n>     json = JSON.parse txt\n>     list = json.lookupList \"foo\"\n>     None\n\n`returns`: `Just` `List` of `JSON` values associated with a given key."}],"name":"JSON","documentation":"Class representing JSON objects."},{"methods":[{"name":"take","documentation":"Takes the value out of the `MVar` and returns it, leaving the `MVar` empty.\nCalling this on an empty `MVar` suspends the thread until the value is put in it."},{"name":"read","documentation":"Takes the value out of the `MVar` and returns it, leaving the original value in the `MVar`.\nCalling this on an empty `MVar` suspends the thread until the value is put in it."},{"name":"put","documentation":"Puts a value inside the `MVar`. Calling this method on a non-empty `MVar`\nsuspends the thread until the old value is taken out."}],"name":"MVar","documentation":"MVar is a mutable variable, safe to read and modify in a multi-threaded environment.\nAn MVar can either be empty or can contain a value.\nReading an empty `MVar` locks the thread until a value is written.\nWriting to a non-empty `MVar` locks the thread until a value is taken out."},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"take","documentation":"Returns the prefix of the stream of given length."},{"name":"drop","documentation":"Drops the given number of elements from the stream."},{"name":"map","documentation":"Runs a function on each element on the stream, not executing any side effects."},{"name":"each","documentation":"Runs a function on each element of the stream, immediately executing all side effects.\nDue to the stream being infinite, this function never terminates."},{"name":"head","documentation":"Field getter"},{"name":"tail","documentation":"Field getter"},{"name":"fold","documentation":"Takes a function and returns a stream resulting from calling the function repeatedly\non the next element of the stream and the previously accumulated value, where the first accumulated value\nis the first element in the stream."},{"name":"collect","documentation":"Transforms a stream containing `Maybe` values into one containing only the `Just` items."},{"name":"takeWhile","documentation":"Returns the longest prefix of stream in which all elements satisfy the given predicate."},{"name":"isStream","documentation":null},{"name":"foldFrom","documentation":"Takes an initial value and function. Returns a stream resulting from calling the function repeatedly\non the next element of the stream and the previously accumulated value."},{"name":"consume","documentation":"`s.consume n` returns a list of the first `n` elements of `s` and the result of dropping the first `n` values of `s`."},{"name":"consumeWhile","documentation":"Returns the longest prefix in which all elements satisfy the given predicate,\nand the result of dropping this prefix from the original stream."},{"name":"dropWhile","documentation":"Drops the longest prefix of stream in which all elements satisfy the given predicate."},{"name":"eval","documentation":"Evaluates all actions associated with stream elements sequentially.\nDue to the stream being infinite, this function never terminates."},{"name":"rateLimit","documentation":"Returns a stream containing the same values as the original stream,\nbut produces them no more often than the given time interval."},{"name":"head=","documentation":"Field setter"},{"name":"tail=","documentation":"Field setter"}],"name":"Stream","documentation":"`Stream` represents an infinite data source, with a list-like API."},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toJSON","documentation":"Serializes an LQuery value to its JSON representation.\nNote: the JSON representation is meant to allow passing LQuery values to\nthird-party components (like Dataframes library).\nChanging serialization scheme here will require adjusting that components\nas well."},{"name":"toLQueryValue","documentation":null},{"name":"startsWith","documentation":"Tests if argument is prefix of this value.\nAllowed only for Text-yielding values."},{"name":"matches","documentation":"Tests if argument being a regexp string matches the current value.\nSupported syntax is based on ECMAScript and UNIX regexp grammar.\nAllowed only for Text-yielding values."},{"name":"day","documentation":"Extract day of month (counted from 1) in the Gregorian calendar.\nAllowed only for Timestamp-yielding values;"},{"name":"month","documentation":"Extract month in the Gregorian calendar.\nAllowed only for Timestamp-yielding values;"},{"name":"year","documentation":"Extract year in the Gregorian calendar.\nAllowed only for Timestamp-yielding values;"}],"name":"LQueryValue","documentation":null},{"methods":[{"name":"toJSON","documentation":null},{"name":"and","documentation":null},{"name":"or","documentation":null},{"name":"not","documentation":null},{"name":"switch","documentation":null}],"name":"Predicate","documentation":"NOTE: the `a` type parameter is a workaround for typechecker limitation\n(LQueryValue.toJSON and Predicate.toJSON are xplicitly corecursive)\nIn future `a` should be just replaced with LQueryValue."},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"at","documentation":null}],"name":"TableHandle","documentation":null},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"_envVarName","documentation":null},{"name":"root","documentation":"Get the root path for a given package.\nE.g. `Package.root 'Std'` will point to the location\nof the standard library inside a Luna distribution."},{"name":"samples","documentation":"Get the sample data directory for a given package.\nSamples are, by convention, data files that can be used to demonstrate\ncapabilities of the library.\nThey are located in the `LIBRARY_ROOT/samples` directory.\nFor example, the path to `iris.csv` sample dataset from the\n`Dataframes` package can be accessed as:\n```\nPackage.samples 'Dataframes' / 'iris.csv'\n```"}],"name":"Package","documentation":"This class provides a way of accessing files inside available packages.\nIt's particularly useful for internal data, data samples etc."}],"functions":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"<=","documentation":"Less than or equal to operator. Requires the objects to define both `<` and `==` methods."},{"name":"^","documentation":null},{"name":"pi","documentation":"The mathematical constant π = 3.14159265359.\n\n> import Std.Base\n>\n> def main:\n>     a = pi\n>     None\n\n`returns`: The mathematical constant π = 3.14159265359."},{"name":"switch","documentation":"Alias for the `if then else` construction, looks better with currying."},{"name":"id","documentation":"Identity function. `id a` is the same as `a` for any `a`."},{"name":"const","documentation":"Constant function. Ignores its second argument and always returns the first."},{"name":"when","documentation":"Takes an action and evaluates it only when a given condition is met. Always returns `None`."},{"name":"seq","documentation":null},{"name":"unless","documentation":"Takes an action returning `None` and evaluating the action only unless a given condition is met."},{"name":"$","documentation":null},{"name":">=","documentation":"Greater or equal operator. Requires the objects to define both `>` and `==` methods."},{"name":"throw","documentation":"Takes a Text and throws it as an error."},{"name":"newMVar","documentation":"Creates an empty MVar object.\nMVar is a mutable variable, safe to read and modify in a multi-threaded environment.\nAn MVar can either be empty or can contain a value.\nReading an empty `MVar` suspends the thread until a value is written.\nWriting to a non-empty `MVar` suspends the thread until a value is taken out."},{"name":"fork","documentation":"Takes an action and executes it in a separate thread."},{"name":"everyWithState","documentation":"A variant of `every` in which the action modifies some local state while running."},{"name":"streamFrom","documentation":"Builds a stream by repeatedly calling an action. Useful for consuming low-level streaming data sources."},{"name":"repeatWhile","documentation":"Repeat an action while predicate returns `True`. Returns a List of all the values for which predicate returned `True`."},{"name":"delayAsync","documentation":"Executes an action in a separate thread, after waiting the specified time interval."},{"name":"every","documentation":"Takes an action and a `TimeInterval`. Evaluates the action in given intervals, returning a `Stream` of consecutive values.\nParticularly useful for polling webservices or scheduling tasks."},{"name":"print","documentation":"Print the value to standard output. Can be called on any value which defines a `toText` method returning `Text`."},{"name":"readFile","documentation":"Read file from the hard drive, returning a `Text` value.\n\n> import Std.Base\n>\n> def main:\n>     filepath = Package.samples \"Base\" / \"exampleFile.txt\"\n>     txt = read filepath\n>     None\n\n`f`: Filepath to a file to read.\n`returns`: Text value with a file content."},{"name":"writeFile","documentation":"Write a Text object into a file with a given path.\n\n> import Std.Base\n>\n> def main:\n>     filepath = \"./myFile.txt\"\n>     text = \"Lorem ipsum\"\n>     write = write filepath text\n>     None\n\n`f`: Filepath for a file to write.\n`c`: Text object to write.\n`returns`: None"},{"name":"catch","documentation":"Takes a value and a function from Text to value.\nReturns the value if it was correct or calls the function if the value was erroneous."},{"name":"bracket","documentation":null}]},{"name":"Std.Foreign.C.Value","documentation":null,"classes":[{"methods":[{"name":"toText","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"ptr","documentation":null},{"name":"fromText","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"isNull","documentation":null},{"name":"null","documentation":null},{"name":"free","documentation":null},{"name":"with","documentation":null}],"name":"CString","documentation":null},{"methods":[{"name":"==","documentation":null},{"name":"toCArg","documentation":null},{"name":"readPtr","documentation":null},{"name":"cast","documentation":null},{"name":"writePtr","documentation":null},{"name":"isNull","documentation":null},{"name":"free","documentation":null},{"name":"moveBytes","documentation":null}],"name":"Ptr","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CChar","documentation":null},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"read","documentation":null},{"name":"ptr","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"isNull","documentation":null},{"name":"null","documentation":null},{"name":"free","documentation":null},{"name":"with","documentation":null},{"name":"mallocElems","documentation":null},{"name":"moveElems","documentation":null},{"name":"write","documentation":null},{"name":"typeRep","documentation":null},{"name":"moveBytes","documentation":null},{"name":"malloc","documentation":null},{"name":"mallocBytes","documentation":null}],"name":"Pointer","documentation":null},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"toList","documentation":null},{"name":"size","documentation":null},{"name":"ptr","documentation":null},{"name":"toCArg","documentation":null},{"name":"free","documentation":null},{"name":"with","documentation":null},{"name":"make","documentation":null},{"name":"alloc","documentation":null},{"name":"assertInBounds","documentation":null},{"name":"uncheckedReadAt","documentation":null},{"name":"readAt","documentation":null},{"name":"uncheckedWriteAt","documentation":null},{"name":"writeAt","documentation":null},{"name":"fromList","documentation":null}],"name":"Array","documentation":null},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toList","documentation":null},{"name":"ptr","documentation":null},{"name":"toCArg","documentation":null},{"name":"free","documentation":null},{"name":"make","documentation":null},{"name":"fromList","documentation":null},{"name":"typeRep","documentation":null}],"name":"NullTerminatedArray","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CUChar","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CWChar","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CInt","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CInt8","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CInt16","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CInt32","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CInt64","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CUInt","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CUInt8","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CUInt16","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CUInt32","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CUInt64","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CLong","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CULong","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CSize","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":"%","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toReal","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromInt","documentation":null}],"name":"CTime","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toReal","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromReal","documentation":null}],"name":"CFloat","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"/","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":null},{"name":"abs","documentation":null},{"name":"negate","documentation":null},{"name":"toReal","documentation":null},{"name":"toText","documentation":null},{"name":"retType","documentation":null},{"name":"fromRetType","documentation":null},{"name":"toCArg","documentation":null},{"name":"byteSize","documentation":null},{"name":"readPtr","documentation":null},{"name":"writePtr","documentation":null},{"name":"fromReal","documentation":null}],"name":"CDouble","documentation":null},{"methods":[{"name":"retType","documentation":null}],"name":"RetType","documentation":null},{"methods":[{"name":"toCArg","documentation":null}],"name":"Arg","documentation":null},{"methods":[{"name":"==","documentation":null},{"name":"ptr","documentation":null},{"name":"toCArg","documentation":null},{"name":"cast","documentation":null},{"name":"isNull","documentation":null},{"name":"free","documentation":null},{"name":"moveBytes","documentation":null}],"name":"ForeignPtr","documentation":null},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"read","documentation":null},{"name":"ptr","documentation":null},{"name":"toCArg","documentation":null},{"name":"isNull","documentation":null},{"name":"null","documentation":null},{"name":"free","documentation":null},{"name":"mallocElems","documentation":null},{"name":"moveElems","documentation":null},{"name":"write","documentation":null},{"name":"typeRep","documentation":null},{"name":"moveBytes","documentation":null},{"name":"malloc","documentation":null},{"name":"fptr","documentation":null},{"name":"fromPointer","documentation":null}],"name":"ManagedPointer","documentation":null}],"functions":[{"name":"nullPtr","documentation":null}]},{"name":"Std.Foreign","documentation":null,"classes":[{"methods":[{"name":"shortRep","documentation":null},{"name":"toJSON","documentation":null},{"name":"call","documentation":null}],"name":"FunPtr","documentation":null}],"functions":[{"name":"cStdLib","documentation":null},{"name":"lookupSymbol","documentation":null}]},{"name":"Std.Geo","documentation":null,"classes":[{"methods":[{"name":"shortRep","documentation":null},{"name":"toJSON","documentation":null},{"name":"latitude","documentation":"Field getter"},{"name":"longitude","documentation":"Field getter"},{"name":"toFeature","documentation":null},{"name":"latitude=","documentation":"Field setter"},{"name":"longitude=","documentation":"Field setter"}],"name":"GeoPoint","documentation":null},{"methods":[{"name":"toJSON","documentation":null},{"name":"properties","documentation":"Field getter"},{"name":"geometry","documentation":"Field getter"},{"name":"addProperty","documentation":"Adds a property to existing GeoJSONFeature.\n\n> import Std.Base\n> import Std.Base\n> \n> def main:\n>     longitude = 19.9449799\n>     latitude = 50.0646501\n>     coordinates = (longitude, latitude)\n>     geometry = JSON.empty . insert \"type\" \"Point\" \n>                           . insert \"coordinates\" coordinates\n>     property = JSON.empty . insert \"name\" \"Cracow\"\n>     feature = GeoJSONFeature property geometry\n>     featureWithPopup = feature . addProperty \"popupContent\" \"home\"\n>     None"},{"name":"properties=","documentation":"Field setter"},{"name":"geometry=","documentation":"Field setter"}],"name":"GeoJSONFeature","documentation":"GeoJSON is a format for encoding a variety of geographic data structures. \nGeoJSONFeatures contain a geometry and additional properties\nGeoJSON supports the following geometry types: Point, LineString, Polygon, \nMultiPoint, MultiLineString, and MultiPolygon.\n\n> import Std.Base\n> import Std.Base\n> \n> def main:\n>     latitude = 19.9449799\n>     longitude = 50.0646501\n>     coordinates = (latitude, longitude)\n>     geometry = JSON.empty . insert \"type\" \"Point\" \n>                           . insert \"coordinates\" coordinates\n>     property = JSON.empty . insert \"name\" \"Cracow\"\n>     feature = GeoJSONFeature property geometry\n>     None"},{"methods":[{"name":"toJSON","documentation":null},{"name":"features","documentation":"Field getter"},{"name":"features=","documentation":"Field setter"}],"name":"GeoJSONFeatureCollection","documentation":"A list of GeoJSONFeatures.\n\n> import Std.Base\n> import Std.Base\n> \n> def main:\n>     latitude1 = 19.9449799\n>     longitude1 = 50.0646501\n>     coordinates1 = (latitude1, longitude1)\n>     latitude2 = 21.017532\n>     longitude2 = 52.237049\n>     coordinates2 = (latitude2, longitude2)\n>     geometry1 = JSON.empty . insert \"type\" \"Point\" \n>                            . insert \"coordinates\" coordinates1\n>     property1 = JSON.empty . insert \"name\" \"Cracow\"\n>     feature1 = GeoJSONFeature property1 geometry1\n>     geometry2 = JSON.empty . insert \"type\" \"Point\" \n>                            . insert \"coordinates\" coordinates2\n>     property2 = JSON.empty . insert \"name\" \"Warsaw\"\n>     feature2 = GeoJSONFeature property2 geometry2\n>     featuresCollection = GeoJSONFeatureCollection [feature1, feature2]\n>     None"}],"functions":[]},{"name":"Std.Graphics2D","documentation":null,"classes":[{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"-","documentation":null},{"name":"toJSON","documentation":null},{"name":"toSVGDefs","documentation":null},{"name":"transformation","documentation":"Field getter"},{"name":"definition","documentation":"Field getter"},{"name":"transform","documentation":null},{"name":"translate","documentation":null},{"name":"rotate","documentation":null},{"name":"toSVG","documentation":null},{"name":"transformation=","documentation":"Field setter"},{"name":"definition=","documentation":"Field setter"}],"name":"Geo","documentation":null},{"methods":[{"name":"toJSON","documentation":null},{"name":"toSVGDefs","documentation":null},{"name":"type","documentation":"Field getter"},{"name":"operands","documentation":"Field getter"},{"name":"type=","documentation":"Field setter"},{"name":"operands=","documentation":"Field setter"}],"name":"Boolean","documentation":null},{"methods":[{"name":"toJSON","documentation":null},{"name":"x","documentation":"Field getter"},{"name":"y","documentation":"Field getter"},{"name":"x=","documentation":"Field setter"},{"name":"y=","documentation":"Field setter"}],"name":"Point","documentation":null},{"methods":[{"name":"toJSON","documentation":null},{"name":"leftHandle","documentation":"Field getter"},{"name":"point","documentation":"Field getter"},{"name":"rightHandle","documentation":"Field getter"},{"name":"leftHandle=","documentation":"Field setter"},{"name":"point=","documentation":"Field setter"},{"name":"rightHandle=","documentation":"Field setter"}],"name":"ControlPoint","documentation":null},{"methods":[{"name":"+","documentation":null},{"name":"*","documentation":null},{"name":"toJSON","documentation":null},{"name":"a","documentation":"Field getter"},{"name":"b","documentation":"Field getter"},{"name":"c","documentation":"Field getter"},{"name":"d","documentation":"Field getter"},{"name":"toList","documentation":null},{"name":"tx","documentation":"Field getter"},{"name":"ty","documentation":"Field getter"},{"name":"a=","documentation":"Field setter"},{"name":"b=","documentation":"Field setter"},{"name":"c=","documentation":"Field setter"},{"name":"d=","documentation":"Field setter"},{"name":"tx=","documentation":"Field setter"},{"name":"ty=","documentation":"Field setter"}],"name":"AffineTransformation","documentation":null},{"methods":[{"name":"toJSON","documentation":null},{"name":"toSVGDefs","documentation":null}],"name":"Shape","documentation":null},{"methods":[{"name":"toJSON","documentation":null}],"name":"BooleanOperation","documentation":null},{"methods":[{"name":"toJSON","documentation":null},{"name":"toSVGDefs","documentation":null}],"name":"GeoDef","documentation":null}],"functions":[{"name":"point","documentation":null},{"name":"lpoint","documentation":null},{"name":"rpoint","documentation":null},{"name":"lrpoint","documentation":null},{"name":"identityTrans","documentation":null},{"name":"translationTrans","documentation":null},{"name":"rotationTrans","documentation":null},{"name":"circle","documentation":null},{"name":"rectangle","documentation":null},{"name":"path","documentation":null},{"name":"emptyGeo","documentation":null}]},{"name":"Std.HTTP","documentation":null,"classes":[{"methods":[{"name":"toText","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"}],"name":"HttpMethod","documentation":"A class representing Http request method"},{"methods":[{"name":"toText","documentation":null},{"name":"shortRep","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"toBinary","documentation":null},{"name":"values","documentation":"Field getter"},{"name":"addValue","documentation":"Adds one pair to the body.\nReturns an `HttpSimpleBody` with the new additional pair"},{"name":"values=","documentation":"Field setter"}],"name":"HttpSimpleBody","documentation":"Helper class for passing parameters in the body of an Http request"},{"methods":[{"name":"toText","documentation":null},{"name":"shortRep","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"json","documentation":"Body of a response converted to `JSON`."},{"name":"stream","documentation":"Returns the body of the response as a stream.\nEven though it can be used with any response, it is most\nuseful when combined with an inherently \"streamy\" data source,\nfor example responses from the Twitter Stream API.\nSee the `Std.Base` module's `Stream` class for information on\non working with streams of data in Luna."},{"name":"text","documentation":"Body of the response converted to `Text`."},{"name":"responseCode","documentation":"Field getter"},{"name":"headers","documentation":"Field getter"},{"name":"getChunk","documentation":"Field getter"},{"name":"successful","documentation":"Tells us whether the response came back yielding a successful result.\nWe assume that response is successful when its code is one of: 200, 201, 202."},{"name":"body","documentation":"The body of the response as a `Binary` blob."},{"name":"responseCode=","documentation":"Field setter"},{"name":"headers=","documentation":"Field setter"},{"name":"getChunk=","documentation":"Field setter"}],"name":"HttpResponse","documentation":"Response of an Http request, allows for different methods\nof accessing the body contents, see the methods."},{"methods":[{"name":"toText","documentation":null},{"name":"shortRep","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"headers","documentation":"Field getter"},{"name":"body","documentation":"Field getter"},{"name":"uri","documentation":"Field getter"},{"name":"method","documentation":"Field getter"},{"name":"auth","documentation":"Field getter"},{"name":"oauth1","documentation":"Field getter"},{"name":"params","documentation":"Field getter"},{"name":"setMethod","documentation":"Sets the method of this `HttpReuqest` to a given `HttpMethod`."},{"name":"setBody","documentation":"Sets the body of a request.\nCan be called with anything that supports a `toBinary` method,\nincluding `Text`, `Binary`, `JSON` and `HttpSimpleBody` instances."},{"name":"setUri","documentation":null},{"name":"addHeader","documentation":"Set the header (key) to a value (val). The header needs to be\na valid Http header name, like `Accept-Charset` (but the case\ndoes not matter)."},{"name":"setBasicAuth","documentation":"Use the provided username and password as `HttpBasicAuth`."},{"name":"setParam","documentation":"Append given key and value to the request params.\nNote: for params passed as the request body,\nconsider using `HttpSimpleBody` helper class."},{"name":"setOAuth1","documentation":"Construct OAuth1 authentication headers using the provided\n`OAuth1Data` object. For a more detailed description of OAuth, please\nconsult `Std.OAuth`."},{"name":"setOAuth2","documentation":"Set the OAuth2 authorization token.\nNote that this assumes that the caller already is in possesion of such a token,\nwhich can be obtained, among other ways, by using the `OAuth2` class from `Std.OAuth`.\nFor a more detailed description of OAuth, please consult `Std.OAuth`."},{"name":"perform","documentation":"Given a fully constructed `HttpRequest` object, this method\nactually performs the request. Note: no data will actually\nbe sent until this method is called."},{"name":"headers=","documentation":"Field setter"},{"name":"uri=","documentation":"Field setter"},{"name":"method=","documentation":"Field setter"},{"name":"auth=","documentation":"Field setter"},{"name":"oauth1=","documentation":"Field setter"},{"name":"params=","documentation":"Field setter"},{"name":"body=","documentation":"Field setter"}],"name":"HttpRequest","documentation":"A class representing an Http request.\nEven though it is possible to construct members of this\nclass by hand, the idiomatic way of making the requests\nuses the helper class `Http`. Please consult the documentation below.\nThis class provides a couple of setters to manipulate the default\nrequests created by `Http` methods."},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"get","documentation":"Create a basic Http GET request for a given uri."},{"name":"head","documentation":"Create a basic Http HEAD request for a given uri."},{"name":"delete","documentation":"Create an Http DELETE request for a given url."},{"name":"put","documentation":"Create an Http PUT request for a given uri and body.\nThe body can be anything that provides a `toBinary` method,\nincluding the `Text`, `Binary`, `JSON` and `HttpSimpleBody` types."},{"name":"post","documentation":"Create an Http POST request for a given uri and body.\nThe body can be anything that provides a `toBinary` method,\nincluding the `Text`, `Binary`, `JSON` and `HttpSimpleBody` types."},{"name":"patch","documentation":"Create an Http PATCH request for a given uri and body.\nThe body can be anything that provides a `toBinary` method,\nincluding the `Text`, `Binary`, `JSON` and `HttpSimpleBody` types."},{"name":"connect","documentation":"Create a basic Http CONNECT request for a given uri."},{"name":"trace","documentation":"Create a basic Http TRACE request for a given uri."},{"name":"options","documentation":"Create an Http OPTIONS request for a given url."},{"name":"getBinary","documentation":"A helper method that immediately gets a binary blob from a given url.\nThere is no need to call `perform` here, as it returns a `Binary` response."},{"name":"getJSON","documentation":"A helper method that immediately gets a JSON response from a given url.\nThere is no need to call `perform` here, as it returns a `JSON` response."}],"name":"Http","documentation":"The main class for issuing Http requests.\nProvides methods for the most common request methods.\nThe basic usage is the following:\n\n> import Std.HTTP\n>\n> def main:\n>     resp = Http.get \"http://someurl.com/\" . perform\n>     None\n\nWhen you want to customize the way the requests are made, you can use the setters\nprovided by the `HttpRequest` class in the following way:\n\n> import Std.HTTP\n>\n> def main:\n>     resp = Http.post \"http://someurl.com/\" . setHeader \"Accept\" \"*\"\n>                                            . setBasicAuth \"user\" \"pass\"\n>                                            . setParam \"someParam\" \"someValue\"\n>                                            . perform\n>     None\n\nNote: the `get`, `post`, `put` and `delete` methods need to be followed\nby a `perform` invocation to actually make the request.\nOnce we obtain the response object (`resp` in the examples above), we\ncan use the methods of the `HttpResponse` class to process it, meaning\nin the examples above you can later call `resp.stream` or `resp.body`."}],"functions":[{"name":"emptyHttpBody","documentation":"Conveniently creates an empty `HttpSimpleBody`"},{"name":"defaultHttpRequest","documentation":"A helper function constructing a default `HttpRequest`,\nintended for internal use by the `Http` class.\nIt is actually equivalent to `Http.get`."}]},{"name":"Std.OAuth","documentation":null,"classes":[{"methods":[{"name":"toText","documentation":null},{"name":"shortRep","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"clientKey","documentation":"Field getter"},{"name":"clientSecret","documentation":"Field getter"},{"name":"oauthToken","documentation":"Field getter"},{"name":"oauthTokenSecret","documentation":"Field getter"},{"name":"clientKey=","documentation":"Field setter"},{"name":"clientSecret=","documentation":"Field setter"},{"name":"oauthToken=","documentation":"Field setter"},{"name":"oauthTokenSecret=","documentation":"Field setter"}],"name":"OAuth1Data","documentation":"A class encapsulating all the necessary OAuth1 data.\nThat means: a `clientKey`, a `clientSecret`, an `oauthToken` and `oauthTokenSecret`.\nIt can be passed directly to `HttpResponse.setOAuth1` method, resulting in\nthe following usage:\n\n> import Std.OAuth\n>\n> def main:\n>     oauthData = OAuth1Data someClientKey someClientSecret someOAuthToken someOAuthTokenSecret\n>     resp = Http.get \"http://someurl.com/\" . setOAuth1 oauthData . perform\n>     # process the response...\n>     None\n"},{"methods":[{"name":"toText","documentation":null},{"name":"shortRep","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"clientSecret","documentation":"Field getter"},{"name":"clientId","documentation":"Field getter"},{"name":"accessTokenEndpoint","documentation":"Field getter"},{"name":"invalidateTokenEndpoint","documentation":"Field getter"},{"name":"callback","documentation":"Field getter"},{"name":"clientSecret=","documentation":"Field setter"},{"name":"clientId=","documentation":"Field setter"},{"name":"accessTokenEndpoint=","documentation":"Field setter"},{"name":"invalidateTokenEndpoint=","documentation":"Field setter"},{"name":"callback=","documentation":"Field setter"}],"name":"OAuth2Data","documentation":"A class encapsulating all the necessary OAuth2 data.\nThat means: a `clientId`, a `clientSecret`, an `accessTokenEndpoint`,\nan `invalidateTokenEndpoint` and an optional `callback` url."},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"postRequest","documentation":"A helper method for issuing OAuth2-related requests."},{"name":"fetchAccessToken","documentation":"Fetches the authorization token using the provided `OAuth2Data` object."},{"name":"invalidateToken","documentation":"Invalidates a token when it is no longer needed."}],"name":"OAuth2","documentation":"A class used for obtaining the OAuth2 authorization token.\nGiven the necessary `OAuth1Data` it will issue a call\nto the `accessTokenEndpoint` and fetch the token. When the\ntoken is no longer needed it can be invalidated with a call\nto `invalidateToken`.\nAn example flow is the following:\n\n> import Std.OAuth\n>\n> def main:\n>     oauthData = OAuth1Data someClientId someClientSecret someOAuthToken someOAuthTokenSecret\n>     token = OAuth2.fetchAccessToken oauthData\n>     resp = Http.get \"http://someurl.com/\" . setOAuth2 token . perform\n>     # process the response...\n>     OAuth2.invalidateToken oauthData token\n\nFor a more in-depth description of the OAuth2 flow, please see\nhttps://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2"}],"functions":[]},{"name":"Std.System","documentation":null,"classes":[{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"currentPlatform","documentation":"Return current platform (MacOS, Linux, Windows)"},{"name":"lookupEnv","documentation":"Lookup an environment variable `v`,\nreturning `Just` result if it exists, `Nothing` otherwise."},{"name":"getEnv","documentation":"Try to retrieve an environment variable `v` and\nthrow an exception if it fails."},{"name":"setEnv","documentation":"Set an environment variable to desired value.\nUnsets the variable if \"\" is given as value."}],"name":"System","documentation":null},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"isCreatePipe","documentation":null}],"name":"PipeRequest","documentation":"Data type representing different ways of connecting the processes outputs (e.g. stdout).\n`Inherit` means that the process gets a given pipe after the process that created it.\n`UseHandle` lets you specify a file to connect to the process instead of, for example, stdout.\n`CreatePipe` creates a fresh connection (pipe) that you can later use to communicate with the process.\n`NoStream` leaves a given pipe closed (e.g. if you don't need the processes stdin)."},{"methods":[{"name":"setBuffering","documentation":"Lets you specify the `BufferMode` for this file."},{"name":"isOpen","documentation":"Checks whether the file this handle is referring to is open."},{"name":"isClosed","documentation":"Checks whether the file this handle is referring to is closed."},{"name":"close","documentation":"Closes the file."},{"name":"flush","documentation":"Flushes any buffered content to make sure that it actually goes through."},{"name":"getContents","documentation":"Return the contents of the file."},{"name":"getLine","documentation":"Get one line of the file."},{"name":"putText","documentation":"Write some `Text` to the file."},{"name":"putLine","documentation":"Write some `Text` to the file, appending a new line at the end."},{"name":"toStream","documentation":"Access this file's contents as a `Stream`.\nFor more information on dealing with streams in Luna\nplease consult the `Stream` class documentation for `Std.Base`."}],"name":"FileHandle","documentation":"A class representing a file in the filesytstem."},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"isBuffered","documentation":null}],"name":"BufferMode","documentation":"Data type used for specifying the buffering mode of the input-output operations."},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"wait","documentation":"Wait for the process described by this handle to finish."}],"name":"ProcessHandle","documentation":"A class representing the low-level handle to the process in the operating system.\nNote that this class is used internally by `Std.System` and\nmost users should use `Process` instead."},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"handle","documentation":"Field getter"},{"name":"wait","documentation":"Wait for this process to finish execution."},{"name":"stdin","documentation":"Field getter"},{"name":"stdout","documentation":"Field getter"},{"name":"stderr","documentation":"Field getter"},{"name":"stdin=","documentation":"Field setter"},{"name":"stdout=","documentation":"Field setter"},{"name":"stderr=","documentation":"Field setter"},{"name":"handle=","documentation":"Field setter"}],"name":"Process","documentation":"A class representing an operating system process.\nIt allows you to access the standard input (`stdin`), the standard output\n(`stdout`) and standard error (`stderr`) of this process, hence allowing\nother processes to communicate with this one.\nIt also exposes the `wait` method."},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"args","documentation":"Field getter"},{"name":"stdin","documentation":"Field getter"},{"name":"stdout","documentation":"Field getter"},{"name":"stderr","documentation":"Field getter"},{"name":"command","documentation":"Field getter"},{"name":"setCommand","documentation":"Set the command to run.\nIn general, calls to this method should be avoided, as the command is best passed\nto the `Command.create` call."},{"name":"setArgs","documentation":"Set the arguments to the process.\nIn general, calls to this method should be avoided, as the arguments are best passed\nto the `Command.create` call."},{"name":"setStdin","documentation":"Set the standard input of the process to a specified `PipeRequest`."},{"name":"setStdout","documentation":"Set the standard output of the process to a specified `PipeRequest`."},{"name":"setStderr","documentation":"Set the standard error of the process to a specified `PipeRequest`."},{"name":"run","documentation":"Actually run this process, returning a `Process` instance."},{"name":"runWithInput","documentation":"Run this process with specified `input`."},{"name":"runWithStream","documentation":"Run this process, passing a stream as its input."},{"name":"execute","documentation":"Execute this process from beginning to end, returning its standard output, standard error\nand exit code instead of the `Process` object."},{"name":"stdin=","documentation":"Field setter"},{"name":"stdout=","documentation":"Field setter"},{"name":"stderr=","documentation":"Field setter"},{"name":"command=","documentation":"Field setter"},{"name":"args=","documentation":"Field setter"}],"name":"ProcessDescription","documentation":"An object representing a process to launch (as opposed to `Process`, which is an already running process).\nNote: in most cases the constructor for this class should not be called directly.\nIt is advisable to use `Command.create` instead. Please see the documentation for `Command`.\nThis class provides a set of setters for changing the arguments to the process\nor changing its input and outputs.\nA `ProcessDescription` class will transform into a running `Process` once its `run` method is called."},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"create","documentation":"Create the command to be run."}],"name":"Command","documentation":"The entry point to creating new processes and running system commands.\nIt facilitates easy creation of processes by passing the command to run and its arguments.\nOnce you call `Command.create <cmd> <args>`, you can modify it using the `ProcessDescription`\nmethods like `setStdin`. Then, you need to call `run` (or one of its variants) to actually\nexecute the process. Example of redirecting the output of `ls -al` to a file:\n\n> import Std.System\n> \n> def main:\n>     cmd = Command.create \"ls\" [\"-al\"] . setStdout (UseHandle somefile)\n>     cmd.run\n"},{"methods":[{"name":"toInt","documentation":null},{"name":"toText","documentation":null},{"name":"shortRep","documentation":null},{"name":"toJSON","documentation":null},{"name":"exitSuccess","documentation":"Successful termination."},{"name":"exitFailure","documentation":"Program failure with an exit code."}],"name":"ExitCode","documentation":"Exit code of a process.\nCan either be `ExitSuccess` or `ExitFailure`, in which case it will\nadditionally contain the exit code."},{"methods":[{"name":"toText","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"}],"name":"Platform","documentation":null},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"current","documentation":"Return current directory."}],"name":"Directory","documentation":null}],"functions":[{"name":"withForkWait","documentation":null}]},{"name":"Std.Test","documentation":null,"classes":[{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"specify","documentation":null}],"name":"Test","documentation":null},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"not","documentation":null},{"name":"body","documentation":"Field getter"},{"name":"run","documentation":null},{"name":"errorMessage","documentation":"Field getter"},{"name":"negatedErrorMessage","documentation":"Field getter"},{"name":"body=","documentation":"Field setter"},{"name":"errorMessage=","documentation":"Field setter"},{"name":"negatedErrorMessage=","documentation":"Field setter"}],"name":"Assertion","documentation":null},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"subject","documentation":"Field getter"},{"name":"should","documentation":null},{"name":"shouldNot","documentation":null},{"name":"subject=","documentation":"Field setter"}],"name":"TestSubject","documentation":null},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"run","documentation":null}],"name":"Bench","documentation":null}],"functions":[{"name":"be","documentation":null},{"name":"equal","documentation":null},{"name":"throwError","documentation":null},{"name":"satisfy","documentation":null}]},{"name":"Std.Time","documentation":null,"classes":[{"methods":[{"name":">","documentation":"Is this `Time` later than the `other`?\n\n> import Std.Time\n> \n> def main:\n>     today = Time.now\n>     withInterval = today.add 20.minutes\n>     isGreater = today.> withInterval\n>     None\n\n`other`: `Time` object to compare with `self`.\n\n`return`: `True` if `other` is before `self` time, `False` otherwise."},{"name":"<","documentation":"Is this `Time` earlier than the `other`?\n\n> import Std.Time\n> \n> def main:\n>     today = Time.now\n>     withInterval = today.add 20.minutes\n>     isGreater = today.< withInterval\n>     None\n\n`other`: `Time` object to compare with `self`.\n\n`return`: `True` if `other` is after `self` time, `False` otherwise."},{"name":"==","documentation":"Does this and the `other` `Time` point to the same time?\n\n> import Std.Time\n> \n> def main:\n>     today = Time.now\n>     withInterval = today.add 20.minutes\n>     isEqual = today.== withInterval\n>     None\n\n`other`: `Time` object to compare with `self`.\n\n`return`: `True` if both `Time` objects are equal, `False` otherwise."},{"name":"toText","documentation":"Converts a `Time` to `Text` using the default format (YYYY-MM-DD.HH:MM:SS)."},{"name":"shortRep","documentation":null},{"name":"toJSON","documentation":null},{"name":"days","documentation":"Returns the days number associated with this `Time`.\n\n> import Std.Time\n> \n> def main:\n>     daysValue = Time.now . days\n>     None\n\n`return`: Days value for `self` time."},{"name":"toLQueryValue","documentation":"Internal: converts a `Time` to `LQueryValue`."},{"name":"safeParse","documentation":"Try to parse `Time` from `Text` assuming the default format of date and time.\nReturns `Just time` if successful, `Nothing` otherwise."},{"name":"parse","documentation":"Parse `Time` from `Text`.\nReturns a `Time` object and throws an error if unable to parse the time."},{"name":"now","documentation":"Gets the current time in the users timezone. \n\n> import Std.Time \n>\n> def main:\n>     nowTime = Time.now\n>     None\n\n`return`: `Time` object for current time."},{"name":"diff","documentation":"Calculate difference between two time values.\n\n> import Std.Time\n> \n> def main:\n>     today = Time.now\n>     montsStart = Time.beginningOfMonth\n>     difference = today.diff otherDay\n>     None\n\n`other`: The `Time` value to calculate difference with `self`.\n\n`return`: The difference between `self` and `other` time in miliseconds."},{"name":"defaultFormat","documentation":"Default format for `Time`: YYYY-MM-DD.HH:MM:SS+TTTT.\nThe `TTTT` in the format above stands for the timezone offset."},{"name":"format","documentation":"Formats a `Time` according to the specifier supplied (converting to `Text`).\nIf a custom format is needed, please see:\nhttps://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Format.html#v:formatTime"},{"name":"add","documentation":"Add a `TimeInterval` to this `Time`.\n\n> import Std.Time\n> \n> def main:\n>     today = Time.now\n>     withInterval = today.add 20.minutes\n>     None\n\n`interval`: Time interval to add to `self` time ie. `20.minytes` or `10.seconds`.\n\n`return`: Updated time."},{"name":"sub","documentation":"Subtract a `TimeInterval` from this `Time`.\n\n> import Std.Time\n> \n> def main:\n>     today = Time.now\n>     withInterval = today.sub 20.minutes\n>     None\n\n`interval`: Time interval to substract from `self` time ie. `20.minytes` or `10.seconds`.\n\n`return`: Updated time."},{"name":"timeOfDay","documentation":"Gets time of day (hours, minutes, seconds) as a `TimeOfDay` instance.\n\n> import Std.Time \n>\n> def main:\n>     nowTime = Time.now . timeOfDay\n>     None\n\n`return`: `TimeOfDay` object for `self` time."},{"name":"setTimeOfDay","documentation":"Sets the time-of-day part of this `Time` to a given `TimeOfDay` instance.\n\n> import Std.Time\n> \n> def main:\n>     noonTime = Time.now . setTimeOfDay TimeOfDay.noon\n>     None\n\n`tod`: `TimeOfDay` instance to set for `self` time.\n\n`return`: `Time` object with given `TimeOfDay`."},{"name":"timeZone","documentation":"Returns the timezone associated with this `Time`.\n\n> import Std.Time\n> \n> def main:\n>     timezone = Time.now . timeZone\n>     None\n\n`return`: Timezone value for `self` time."},{"name":"setTimeZone","documentation":"Sets the timezone of this time to a given `TimeZone` instance.\n\n> import Std.Time\n> \n> def main:\n>     newTimezone = Time.now . setTimeZone TimeZone.utc\n>     None\n\n`tz`: `TimeZone` instance to set for `self` time.\n\n`return`: `Time` object with given `TimeZone`."},{"name":"addDays","documentation":"Adds a given number of days to the date.\n\n> import Std.Time\n> \n> def main:\n>     updatedDays = Time.now . addDays 13\n>     None\n\n`d`: Number of days to add to `self` time.\n\n`return`: `Time` object with updated days value."},{"name":"subDays","documentation":"Subtracts a given number of days from the date.\n\n> import Std.Time\n> \n> def main:\n>     updatedDays = Time.now . subDays 13\n>     None\n\n`d`: Numebr of days to substract from `self` time.\n\n`return`: `Time` object with updated days value."},{"name":"beginningOfDay","documentation":"Gets the beginning of the current day.\nIf called on February 14th at 4:00, it will return February 14th 0:00\n\n> import Std.Time\n> \n> def main:\n>     begin = Time.beginningOfDay\n>     None\n\n`return`: `Time` value for the beginning of the day."},{"name":"endOfDay","documentation":"Gets the end of the current day.\nIf called on February 14th at 4:00, it will return February 15th 0:00\n\n> import Std.Time\n> \n> def main:\n>     end = Time.endOfDay\n>     None\n\n`return`: `Time` value for the end of the day."},{"name":"timeOfYear","documentation":"Gets the time of year in form of a tuple: (year, month, day)\n\n> import Std.Time\n> \n> def main:\n>     date = Time.now . timeOfYear\n>     None\n\n`return`: (year, month, day) tuple for `self` time."},{"name":"fromTimeOfYear","documentation":"Creates a `Time` object from its parameters: the year, month and day and an optional `TimeZone`.\n\n> import Std.Time\n> \n> def main:\n>     newTime = Time.fromTimeOfYear  2020 12 15 (Just TimeZone.utc)\n>     None\n\n`y`: Year parameter to create `Time` object.\n`m`: Month parameter to create `Time` object.\n`d`: Day parameter to create `Time` object.\n`tz`: Optional `TimeZone` parameter to create `Time` object. Current timezone is a default one. \nTo set default timezone use `Nothing`.\n\n`return`: `Time` object created from year, month, day and optionally timezone."},{"name":"beginningOfMonth","documentation":"Gets the `Time` representing the first day of the current month.\n\n> import Std.Time\n> \n> def main:\n>     firstDay = Time.beginningOfMonth\n>     None\n\n`return`: `Time` object for the first day of current month."},{"name":"endOfMonth","documentation":"Gets the `Time` representing the last day of the current month.\n\n> import Std.Time\n> \n> def main:\n>     lasttDay = Time.endOfMonth\n>     None\n\n`return`: `Time` object for the last day of current month."},{"name":"beginningOfYear","documentation":"Gets the `Time` representing the first day (January 1st) of the current year.\n\n> import Std.Time\n> \n> def main:\n>     firstDay = Time.beginningOfYear\n>     None\n\n`return`: `Time` object for the first day of current year."},{"name":"endOfYear","documentation":"Gets the `Time` representing the last day (December 31st) of the current year.\n\n> import Std.Time\n> \n> def main:\n>     lasttDay = Time.endOfYear\n>     None\n\n`return`: `Time` object for the last day of current year."},{"name":"toUTC","documentation":"Converts this `Time` instance to a `UTCTime`.\n\n> import Std.Time\n> \n> def main:\n>     today = Time.now\n>     todayUTC = today.toUTC\n>     None\n\n`return`: `UTCTime` object for `self` `Time` value."},{"name":"safeParseFmt","documentation":"Tries to parse `Time` from `Text` using the specified format.\nReturns `Just time` if successful and `Nothing` otherwise.\nIn most cases, you can use `safeParse`, which uses the default format.\nIf a custom format is needed, please see:\nhttps://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Format.html#v:formatTime"},{"name":"parseFmt","documentation":"Parse `Time` from `Text` using the supplied format.\nReturns a `Time` object and throws an error if unable to parse the time.\nIn most cases, you can use `parse`, which uses the default format.\nIf a custom format is needed, please see:\nhttps://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Format.html#v:formatTime"},{"name":"fromEpoch","documentation":"Parses a `Time` from a number representing the standard epoch."},{"name":"toEpoch","documentation":"Converts a `Time` to an epoch."}],"name":"Time","documentation":"A class representing time (and date), with timezone.\nBy default it will use the current timezone as set on the user's machine.\nIf you wish to override that behaviour, you can explicitly set the timezone\nwith `setTimeZone`, like:\n\n> import Std.Time \n>\n> def main:\n>     timezone = Time.now . setTimeZone TimeZone.cst\n>     None\n\n\n`Time` supports various formatting and parsing methods, including the\ndefault `toText` method, `format` (accepting a format string), `toEpoch`,\n`parse`, `parseFmt` (for custom formats) and `fromEpoch`.\n\n`Time` instances can be compared and you can add and subtract `TimeIntervals`,\nlike:\n\n> import Std.Time \n>\n> def main: \n>     newTime = Time.now . add 2.minutes\n>     None\n\nThe above can also be expressed in a more natural syntax with:\n\n> import Std.Time \n>\n> def main: \n>     newTime = 2.minutes.fromNow\n>     None \n\n\nAdditional helper methods exist to make working with `Time` easier, please\nconsult the docstring for each method for further information."},{"methods":[{"name":"==","documentation":"Check does the offset of this `TimeZone` is the same as the `other` one.\n\n> import Std.Time \n>\n> def main:\n>    pstTimeZone = TimeZone.pst\n>    utcTimeZone = TimeZone.utc\n>    areEqual = pstTimeZone.== utcTimeZone\n>    None\n\n`other`: `TimeZone` object to compare with `self`.\n\n`return`: `True` if the timezonses have the same offset and `False` otherwise."},{"name":"toText","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"minutes","documentation":"The offset (in minutes) from the UTC timezone.\n\n> import Std.Time \n>\n> def main:\n>    pacificStandardTime = TimeZone.pst\n>    min = pacificStandardTime.minutes\n>    None\n\n`return`: Numerical value for the offset in minutes for `self` timezone."},{"name":"current","documentation":"Returns the `TimeZone` object representing the current timezone.\n\n> import Std.Time \n>\n> def main:\n>    currentTimeZone = TimeZone.current\n>    None\n\n`return`: The `TimeZone` object representing the current timezone."},{"name":"name","documentation":"The three letter shortcut name for this timezone, can be blank.\n\n> import Std.Time \n>\n> def main:\n>    pacificStandardTime = TimeZone.pst\n>    timeZoneName = pacificStandardTime.name\n>    None\n\n`return`: Text value containing the three letter short name for this \ntimezone, can be blank."},{"name":"create","documentation":"Creates a new `TimeZoneInstance`.\n\n> import Std.Time \n>\n> def main:\n>    newTimezone = TimeZone.create 60 False \"CET\"\n>    None\n\n`offsetMins`: Amount of time subtracted from or added to Coordinated Universal Time (UTC) in minutes.\n`summerOnly`: Boolean value describing if the timezone has daylight saving time or not.\n`name`: Text value contains the three letter shortcut name for this timezone, can be blank.\n\n`return`: new timezone instance with given name and offset."},{"name":"summerOnly","documentation":"Is this timezone valid only throughout the summertime?\n\n> import Std.Time \n>\n> def main:\n>    pacificStandardTime = TimeZone.pst\n>    justSummer = pacificStandardTime.summerOnly\n>    None\n\n`return`: `True` if the timezone can be in daylight saving time or `False` otherwise."},{"name":"fromMinutes","documentation":"Creates a nameless timezone with a given offset (in minutes).\n\n> import Std.Time \n>\n> def main:\n>    newTimeZone = TimeZone.fromMinutes 360\n>    None\n\n`m`: The offset for new timezone in minutes.\n\n`return`: New unnamed timezone instance with the offset `m` in minutes."},{"name":"fromHours","documentation":"Creates a nameless timezone with a given offset (in hours).\n\n> import Std.Time \n>\n> def main:\n>    newTimeZone = TimeZone.fromHours 4\n>    None\n\n`h`: The offset for new timezone in hours.\n\n`return`: New unnamed timezone instance with the offset `h` in hours."},{"name":"utc","documentation":"Returns the `TimeZone` object representing the UTC timezone.\n\n> import Std.Time \n>\n> def main:\n>    utcTimeZone = TimeZone.utc\n>    None\n\n`return`: The `TimeZone` object representing the UTC timezone."},{"name":"gmt","documentation":"Returns the `TimeZone` object representing the GMT timezone.\n\n> import Std.Time \n>\n> def main:\n>    gmtTimeZone = TimeZone.gmt\n>    None\n\n`return`: The `TimeZone` object representing the GMT timezone."},{"name":"cst","documentation":"Returns the `TimeZone` object representing the CST timezone.\n\n> import Std.Time \n>\n> def main:\n>    cstTimeZone = TimeZone.cst\n>    None\n\n`return`: The `TimeZone` object representing the CTS timezone."},{"name":"pst","documentation":"Returns the `TimeZone` object representing the PST timezone.\n\n> import Std.Time \n>\n> def main:\n>    pstTimeZone = TimeZone.pst\n>    None\n\n`return`: The `TimeZone` object representing the PST timezone."}],"name":"TimeZone","documentation":"A class representing the timezone.\nPlease keep in mind that the offset is in minutes, as some timezones\nuse the multiple of 15 minutes as the offset."},{"methods":[{"name":">","documentation":"Does this `TimeOfDay` point to a later time during the day than the `other`?\n\n> import Std.Time \n>\n> def main:\n>    noonTime = TimeOfDay.noon\n>    currentTime = TimeOfDay.current \n>    isAfterNoon = currentTime.> noonTime\n>    None\n\n`other`: `TimeOfDay` object to compare with `self`\n\n`return`: `True` if the `other` time is later then `self`, `False` otherwise."},{"name":"<","documentation":"Does this `TimeOfDay` point to an earlier time during the day than the `other`?\n\n> import Std.Time \n>\n> def main:\n>    noonTime = TimeOfDay.noon\n>    currentTime = TimeOfDay.current \n>    isBeforeNoon = currentTime.< noonTime\n>    None\n\n`other`: `TimeOfDay` object to compare with `self`\n\n`return`: `True` if the `other` time is earlier then `self`, `False` otherwise."},{"name":"==","documentation":"Is this `TimeOfDay` equal to the other? (Up to one second resolution).\n\n> import Std.Time \n>\n> def main:\n>    noonTime = TimeOfDay.noon\n>    currentTime = TimeOfDay.current \n>    isNoon = currentTime.== noonTime\n>    None\n\n`other`: `TimeOfDay` object to compare with `self`\n\n`return`: `True` if the `other` time is the same as `self`, `False` otherwise."},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"second","documentation":"Returns hour from `TimeOfDay` object.\n\n> import Std.Time \n>\n> def main:\n>    midnightTime = TimeOfDay.midnight\n>    midnightSecond = midnightTime.second\n>    None\n\n`return`: Second value from `self`."},{"name":"hour","documentation":"Returns hour from `TimeOfDay` object.\n\n> import Std.Time \n>\n> def main:\n>    midnightTime = TimeOfDay.midnight\n>    midnightHour = midnightTime.hour\n>    None\n\n`return`: Hour value from `self`."},{"name":"minute","documentation":"Returns hour from `TimeOfDay` object.\n\n> import Std.Time \n>\n> def main:\n>    midnightTime = TimeOfDay.midnight\n>    midnightMinute = midnightTime.minute\n>    None\n\n`return`: Minute value from `self`."},{"name":"midnight","documentation":"Returns time for midnight. \n\n> import Std.Time \n>\n> def main:\n>    midnightTime = TimeOfDay.midnight\n>    None\n\n`return`: `TimeOfDay` object for midnight."},{"name":"noon","documentation":"Returns time for noon. \n\n> import Std.Time \n>\n> def main:\n>    noonTime = TimeOfDay.noon\n>    None\n\n`return`: `TimeOfDay` object for noon."}],"name":"TimeOfDay","documentation":"A class representing the time of day (hours, minutes, seconds)."},{"methods":[{"name":">","documentation":"Is this `UTCTime` later than the `other`?"},{"name":"<","documentation":"Is this `UTCTime` earlier than the `other`?"},{"name":"==","documentation":"Does this and the `other` `UTCTime` point to the same time?"},{"name":"toText","documentation":"Converts a `Time` to `Text` using the default format (YYYY-MM-DD.HH:MM:SS)."},{"name":"shortRep","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"diff","documentation":"Calculate difference between two time values."},{"name":"toZonedTime","documentation":"Converts this `UTCTime` instance to a `Time`, using the local timezone."},{"name":"defaultFormat","documentation":"Default format for `UTCTime`: YYYY-MM-DD.HH:MM:SS."},{"name":"format","documentation":"Formats a `Time` according to the specifier supplied (converting to `Text`).\nIf a custom format is needed, please see:\nhttps://hackage.haskell.org/package/time-1.8.0.3/docs/Data-Time-Format.html#v:formatTime"},{"name":"add","documentation":"Add a `TimeInterval` to this `UTCTime`."},{"name":"sub","documentation":"Subtract a `TimeInterval` from this `UTCTime`."}],"name":"UTCTime","documentation":"A class representing the UTC time (mostly to facilitate other computations).\nFor the majority of use-cases it is recommended to use the `Time` class, which\nsupports timezones and provides a much richer API. However, for frequent\noperations involving time differences and arithmetic operations, this class\nwill provide slightly better performance."},{"methods":[{"name":"+","documentation":null},{"name":"-","documentation":null},{"name":">","documentation":null},{"name":"<","documentation":null},{"name":"==","documentation":"Are this and the `other` `TimeIntervals` the same?"},{"name":"toInt","documentation":null},{"name":"toReal","documentation":"Return a real representing the number of picoseconds in this `TimeInterval`."},{"name":"toText","documentation":null},{"name":"shortRep","documentation":null},{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"toMicroseconds","documentation":"Return the number of microseconds in this interval."},{"name":"before","documentation":"Subtract this `TimeInterval` from a given `Time`, hence\nreturning a point in time `before` the given `Time`."},{"name":"add","documentation":null},{"name":"sub","documentation":null},{"name":"toSeconds","documentation":"Return the number of seconds in this interval."},{"name":"toMiliseconds","documentation":"Return the number of miliseconds in this interval."},{"name":"from","documentation":"Add this `TimeInterval` to a given `Time`, hence\nreturning a point in time some `TimeInterval` `from` the given `Time`."},{"name":"ago","documentation":"Return this `TimeInterval` before now (so some amount of time ago)."},{"name":"fromNow","documentation":"Return this `TimeInterval` after now (so some amount of time from now)."}],"name":"TimeInterval","documentation":"A class representing time intervals, that is: a difference between two times.\nCan be converted to different time resolutions like seconds, miliseconds and microseconds.\nInternally the time interval is stored with picosecond resolution.\nThe main purpose of this class is to make working with time intuitive:\nusing the helper methods you can write things like:\n```\n5.seconds.ago\n10.minutes.fromNow\n15.seconds.before someTime\n20.minutes.after someTime\n```"}],"functions":[]},{"name":"Std.WebSockets","documentation":null,"classes":[{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"path","documentation":"Field getter"},{"name":"create","documentation":"A method actually connecting to the socket."},{"name":"host","documentation":"Field getter"},{"name":"port","documentation":"Field getter"},{"name":"secure","documentation":"Field getter"},{"name":"setHost","documentation":"Sets the host part of the url to connect to."},{"name":"setPath","documentation":"Sets the path part of the url to connect to."},{"name":"setPort","documentation":"Specifies the port to which to connect."},{"name":"setSecure","documentation":"Used for explicitly making the connection secure.\nNote that in the majority of use cases this will be deduced from\nthe url, hence rendering the usage of this method unnecessary."},{"name":"host=","documentation":"Field setter"},{"name":"port=","documentation":"Field setter"},{"name":"path=","documentation":"Field setter"},{"name":"secure=","documentation":"Field setter"}],"name":"WebSocketInstance","documentation":"A class used for creating new `WSConnection` instances,\nhence making the connections over web sockets. Please note\nthat it is advisable to use the `WebSocket.connection` method rather\nthan to create new connections instead of instantiating this class\ndirectly. On the other hand, the setters of this class are\nused well with the helper method. Please see the documentation for `WebSocket`."},{"methods":[{"name":"read","documentation":"Read from the WebSocket.\nReturns a `Binary` blob that can later be converted\nto any data type necessary."},{"name":"stream","documentation":"Tap into the WebSocket, creating a `Stream` of `Binary` blobs.\nPlease see the documentation for `Stream` in `Std.Base` for\ninformation on how to process streams in Luna."},{"name":"write","documentation":"Send textual data over the WebSocket connection.\nCan be given anything that is convertable to `Text` (exposing a `toText` method)."},{"name":"close","documentation":"Close the WebSocket connection after it is no longer needed."},{"name":"writeBinary","documentation":"Send binary data over the WebSocket connection.\nCan be given anything that is convertable to `Binary` (exposing a `toBinary` method)."}],"name":"WSConnection","documentation":"A class representing the WebSocket connection.\nThis is the handle you are given after you create a WebSocket\nconnection with `WebSocket.connection`. It allows you to read\nand write to the WebSocket and close it after it is no longer needed."},{"methods":[{"name":"sendToAll","documentation":"Send a textual message to all of the connected clients.\nThe message may be of any type exposing a `toText` method."},{"name":"sendBinaryToAll","documentation":"Send a binary message to all of the connected clients.\nThe message may be of any type exposing a `toBinary` method."},{"name":"nextMessage","documentation":"Helper method that reads the next message that has arrived to the server."},{"name":"messageStream","documentation":"Taps into the stream of incoming messages, returning a `Stream` of `Binary` blobs.\nPlease see the documentation for `Stream` in `Std.Base` for\ninformation on how to process streams in Luna."}],"name":"WSServer","documentation":"A simple broadcast WebSocket server.\nAllows you to send messages to all of the connected clients at once.\nNote that you should use the `WebSocket.server` helper method to create\ninstances of this class. Refer to the documentation of the `WebSocket`\nclass for more information."},{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"connection","documentation":"Connect to the WebSocket at given address (the `host` param).\nYou must call `create` on the object created by this method to actually make the connection.\nThe host may or may not contain the `ws` or `wss` specifier.\nIf `wss` is specified, the connection will be assumed to be secure\nand the port will be set to 443. For `ws` connections the default port\nis 80. If you wish to create a secure connection but leave out the\n`wss` part of the url, you must explicitly call `setSecure` to override\nthe defaults.\n\n> import Std.WebSockets\n> \n> def main:\n>     conn = WebSocket.connection \"ws://somehost.com\" \"/sockets\" \n>                     . setPort 12345 . create\n>     stream = conn.stream\n>     # process the incoming stream...\n>     conn.close\n\n`host`: Address of the server.\n`port`: Port to accept the connections.\n\n`return`: The connection to the WebSocket."},{"name":"server","documentation":"Create a simple, broadcast server that recieves messages from its clients\nand can send messages to all of the clients at once.\nyou need to specify what will be the address (`host`) of the server and\non which port it will be accepting the connections (`port`). Once you create it,\nyou can call all of the `WSServer` methods on the returned server instance.\n\n> import Std.WebSockets\n> \n> def main:\n>     server = WebSocket.server \"somehost\" 55555\n>     server.sendToAll \"hello, clients\"\n>     responseStream = server.messageStream\n>     None\n\n`host`: Address of the server.\n`port`: Port to accept the connections.\n\n`return`: Server instance."}],"name":"WebSocket","documentation":"The main class for dealing with WebSockets.\nSupports creating client-side connections (with `connect`) and\nservers (with `server`)."}],"functions":[]},{"name":"Std.XML","documentation":null,"classes":[{"methods":[{"name":"toJSON","documentation":"Default toJSON implementation"},{"name":"render","documentation":null},{"name":"setAttr","documentation":null}],"name":"XNode","documentation":null}],"functions":[]}]}